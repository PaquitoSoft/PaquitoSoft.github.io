{"pageProps":{"posts":[{"slug":"ractive-js-tutorial-the-final-touch","title":"Ractive.js tutorial - The final touch (6 of 6)","creationDate":"2015-08-02T18:32:00.629Z","keywords":"tutorial, javascript, ractive, ractivejs","status":"published","excerpt":"<p>(<em>Previous step: <a href=\"/post/ractive-js-tutorial-managing-users-notes\">Managing user's notes</a></em>)</p>\n<p>There are some little things we should improve in our application:</p>\n<ul>\n<li><a href=\"#home-flickering\">Home flickering</a></li>\n<li><a href=\"#show-errors\">Show errors</a></li>\n<li><a href=\"#cache-ajax\">Cache ajax requests</a></li>\n</ul>\n<h2>Home flickering</h2>\n<p>Right now, if you reload the page with a user page URL in the browser, you first see the home page and then you're redirected to the user page.\nWhen we load the application and the router (<a href=\"https://github.com/visionmedia/page.js\">PageJS</a>) gets initialized, it checks the URL and invokes the corresponding route handler (you can disable this behaviour if you want to by using the <a href=\"https://github.com/visionmedia/page.js#pageoptions\"><em>dispatch</em> attribute</a>).\nAs we have configured the default view to be 'HomePage' in our <em>App</em> instance, it will get loaded before the router does its magic.</p>\n<p>My solution for this is to create an empty view in our <em>App</em> and set it to be the default view, so we won't see any sub-view until the router invokes the right route handler and the right view is promoted to be shown.</p>\n","content":"<p>(<em>Previous step: <a href=\"/post/ractive-js-tutorial-managing-users-notes\">Managing user's notes</a></em>)</p>\n<p>There are some little things we should improve in our application:</p>\n<ul>\n<li><a href=\"#home-flickering\">Home flickering</a></li>\n<li><a href=\"#show-errors\">Show errors</a></li>\n<li><a href=\"#cache-ajax\">Cache ajax requests</a></li>\n</ul>\n<h2>Home flickering</h2>\n<p>Right now, if you reload the page with a user page URL in the browser, you first see the home page and then you're redirected to the user page.\nWhen we load the application and the router (<a href=\"https://github.com/visionmedia/page.js\">PageJS</a>) gets initialized, it checks the URL and invokes the corresponding route handler (you can disable this behaviour if you want to by using the <a href=\"https://github.com/visionmedia/page.js#pageoptions\"><em>dispatch</em> attribute</a>).\nAs we have configured the default view to be 'HomePage' in our <em>App</em> instance, it will get loaded before the router does its magic.</p>\n<p>My solution for this is to create an empty view in our <em>App</em> and set it to be the default view, so we won't see any sub-view until the router invokes the right route handler and the right view is promoted to be shown.</p>\n<p><strong><em>root-folder</em>/app/js/app.js</strong> (<em>include a default empty view</em>)</p>\n<pre><code class=\"language-javascript\">import Ractive from 'ractive';\nimport template from '../views/app.html';\n\nimport * as RouterPlugin from './plugins/router';\nimport routesConfiguration from './config/routes';\n\nimport RouterComponent from './components/layout/router';\nimport SearchUserComponent from './components/layout/search-user';\nimport HomePageComponent from './components/home-page';\nimport UserPageComponent from './components/user-page'\n\nlet App = new Ractive({\n\tel: '#app',\n\ttemplate: template,\n\tcomponents: {\n\t\tSearchUser: SearchUserComponent,\n\t\tRouter: RouterComponent,\n\t\tEmptyPage: Ractive.extend({ template: '' })\n\t},\n\tdata: {\n\t\tcomponentName: 'EmptyPage'\n\t},\n\toninit() {\n\t\tRouterPlugin.init(routesConfiguration, this.onNavigation.bind(this));\n\t\tconsole.log('App::oninit# Application initialized!');\n\t},\n\tonNavigation(error, navigationContext) {\n\t\tconsole.log('APP::onNavigation# Navigating to:', navigationContext.pageName, 'with context:', navigationContext);\n\n\t\tif (error) {\n\t\t\tconsole.warn('App::onNavigation# Error navigating:', error);\n\t\t} else {\n\t\t\tthis.set({\n\t\t\t\treq: {\n\t\t\t\t\tparams: navigationContext.params,\n\t\t\t\t\tbody: navigationContext.state\n\t\t\t\t},\n\t\t\t\tcomponentName: navigationContext.pageName\n\t\t\t});\n\t\t}\n\t}\n});\n\nexport default App;\n</code></pre>\n<h2>Show errors</h2>\n<p>Right now if you look for a user that doesn't exist in GitHub, you won't get notified. The error is only printed in the browser tools console.\nWe just need to add a little <em>html</em> to our main application template and a little code to our <em>App</em> instance to show the message.</p>\n<p><strong><em>root-folder</em>/app/views/app.html</strong> (<em>add error message markup</em>)</p>\n<pre><code class=\"language-html\">&lt;div class=&quot;main-container&quot;&gt;\n\t&lt;nav class=&quot;navbar navbar-default&quot; role=&quot;navigation&quot;&gt;\n\t\t&lt;div class=&quot;col-sm-1&quot;&gt;\n\t\t\t&lt;a href=&quot;/&quot;&gt;\n\t\t\t\t&lt;h3&gt;Notetaker&lt;/h3&gt;\n\t\t\t&lt;/a&gt;\n\t\t&lt;/div&gt;\n\t\t&lt;div class=&quot;col-sm-7 col-sm-offset-1&quot; style=&quot;margin-top: 15px;&quot;&gt;\n\t\t\t&lt;SearchUser placeholder=&quot;Type a GitHub username...&quot; /&gt;\n\t\t&lt;/div&gt;\n\t&lt;/nav&gt;\n\t&lt;div class=&quot;container&quot;&gt;\n\t\t&lt;Router componentName=&quot;{{componentName}}&quot;/&gt;\n\t&lt;/div&gt;\n\t{{#errorMsg}}\n\t\t&lt;div class=&quot;alert alert-danger alert-dismissible&quot; style=&quot;position: absolute; top: 80px; right: 10px;&quot; role=&quot;alert&quot;&gt;\n\t\t\t&lt;button type=&quot;button&quot; class=&quot;close&quot; aria-label=&quot;Close&quot;&gt;&lt;span aria-hidden=&quot;true&quot;&gt;&amp;times;&lt;/span&gt;&lt;/button&gt;\n\t\t\t&lt;strong&gt;Error:&lt;/strong&gt; {{errorMsg}}\n\t\t&lt;/div&gt;\n\t{{/errorMsg}}\n&lt;/div&gt;\n</code></pre>\n<p><strong><em>root-folder</em>/app/js/app.js</strong> (_add 'showAlert' function and use it from the routes handler)</p>\n<pre><code class=\"language-javascript\">import Ractive from 'ractive';\nimport template from '../views/app.html';\n\nimport * as RouterPlugin from './plugins/router';\nimport routesConfiguration from './config/routes';\n\nimport RouterComponent from './components/layout/router';\nimport SearchUserComponent from './components/layout/search-user';\nimport HomePageComponent from './components/home-page';\nimport UserPageComponent from './components/user-page'\n\nlet App = new Ractive({\n\tel: '#app',\n\ttemplate: template,\n\tcomponents: {\n\t\tSearchUser: SearchUserComponent,\n\t\tRouter: RouterComponent,\n\t\tEmptyPage: Ractive.extend({ template: '' })\n\t},\n\tdata: {\n\t\tcomponentName: 'EmptyPage'\n\t},\n\toninit() {\n\t\tRouterPlugin.init(routesConfiguration, this.onNavigation.bind(this));\n\t\tconsole.log('App::oninit# Application initialized!');\n\t},\n\tonNavigation(error, navigationContext) {\n\t\tconsole.log('APP::onNavigation# Navigating to:', navigationContext.pageName, 'with context:', navigationContext);\n\n\t\tif (error) {\n\t\t\tconsole.warn('App::onNavigation# Error navigating:', error);\n\t\t\tthis.showAlert(error.displayMessage || error.message);\n\t\t} else {\n\t\t\tthis.set({\n\t\t\t\treq: {\n\t\t\t\t\tparams: navigationContext.params,\n\t\t\t\t\tbody: navigationContext.state\n\t\t\t\t},\n\t\t\t\tcomponentName: navigationContext.pageName\n\t\t\t});\n\t\t}\n\t},\n\tshowAlert(message) {\n\t\tthis.set('errorMsg', message);\n\t\tsetTimeout(() =&gt; {\n\t\t\tthis.set('errorMsg', null);\n\t\t}, 2500);\n\t}\n});\n\nexport default App;\n</code></pre>\n<h2>Cache ajax requests</h2>\n<p>The users info we're getting from GitHub doesn't change very often and, also, GitHub has <a href=\"https://developer.github.com/v3/#rate-limiting\">some limitations</a> on unauthorized requests you can make per hour.\nIt would be great to cache that info in the broswer (for example: using <em>localStorage</em>) so we avoid those limiations and the application reponds faster when asking for the same user info several times.\nWe will use the great <a href=\"https://github.com/pamelafox/lscache\">lscache</a> library so it handles <em>localStorage</em> management and it allows us to set TTLs (<em>time to live</em>) on our stored values to get automatically invalidated.</p>\n<p>On the one hand, we need to specify which request we want to cache. In our user model, we set the GitHub requests to be cached for one hour.</p>\n<p>First we need to install the dependecy:</p>\n<pre><code>$ npm install lscache --save\n</code></pre>\n<p><strong><em>root-folder</em>/app/js/models/user.js</strong> (<em>set GitHub ajax request to be cached</em>)</p>\n<pre><code class=\"language-javascript\">import * as ajax from '../plugins/ajax';\n\nconst GITHUB_BASE_URL = 'https://api.github.com';\nconst FIREBASE_BASE_URL = `https://ps-github-saver.firebaseio.com`;\n\nclass User {\n\t\n\tconstructor(profile, repos, notes) {\n\t\tthis.profile = profile;\n\t\tthis.repos = repos;\n\t\tthis.notes = notes || []; // Default parameters values are only valid for undefined ones\n\t}\n\n\taddNote(newNote) {\n\t\tthis.notes.push(newNote);\n\t\treturn ajax.putJson(`${FIREBASE_BASE_URL}/${this.profile.login.toLowerCase()}.json`, this.notes);\n\t}\n\n\tremoveNote(note) {\n\t\tvar index = this.notes.indexOf(note);\n\t\tif (index &gt;= 0) {\n\t\t\t\tthis.notes.splice(index, 1);\n\t\t\treturn ajax.putJson(`${FIREBASE_BASE_URL}/${this.profile.login.toLowerCase()}.json`, this.notes);\n\t\t}\n\t}\n\n\tstatic findByName(username) {\n\t\tlet userProfileUrl = `${GITHUB_BASE_URL}/users/${username}`,\n\t\t\tuserReposUrl = `${GITHUB_BASE_URL}/users/${username}/repos`,\n\t\t\tuserNotesUrl = `${FIREBASE_BASE_URL}/${username.toLowerCase()}.json`;\n\n\t\tlet result = new Promise((resolve, reject) =&gt; {\n\t\t\tPromise.all([\n\t\t\t\tajax.getJson(userProfileUrl, {cache: true, ttl: 60}), // TTL in minutes\n\t\t\t\tajax.getJson(userReposUrl, {cache: true, ttl: 60}), // TTL in minutes\n\t\t\t\tajax.getJson(userNotesUrl)\n\t\t\t])\n\t\t\t.then(values =&gt; {\n\t\t\t\tresolve(new User(values[0], values[1], values[2]));\n\t\t\t})\n\t\t\t.catch(reject);\n\t\t});\n\n\t\treturn result;\n\t}\n}\n\nexport default User;\n</code></pre>\n<p>Now we need to update our <em>ajax</em> plugin to use <em>lscache</em> library and deal with caching configuration:\n<strong><em>root-folder</em>/js/app/plugins/ajax.js</strong></p>\n<pre><code class=\"language-javascript\">import lscache from 'lscache';\n\nfunction checkResponseStatus(res) {\n\tif (res.status &lt; 400) {\n\t\treturn res;\n\t} else {\n\t\tlet error = new Error(res.statusText);\n\t\terror.statusCode = res.status;\n\t\terror.response = res;\n\t\tthrow error;\n\t}\n}\n\nfunction parseJson(res) {\n\treturn new Promise((resolve) =&gt; {\n\t\tres.json().then(data =&gt; {\n\t\t\tresolve({\n\t\t\t\tjson: data,\n\t\t\t\turl: res.url\n\t\t\t});\n\t\t});\n\t});\n}\n\nfunction cacheResponse(shouldCache, ttl, key) {\n\treturn (data) =&gt; {\n\t\tif (shouldCache) {\n\t\t\tconsole.log('Ajax::cacheResponse# Caching response with key:', key, 'for', ttl, 'minutes.');\n\t\t\tlscache.set(data.url, data.json, ttl); // Last parameter is TTL in minutes\n\t\t}\n\t\treturn data.json;\n\t}\n}\n\nexport function getJson(url, options = {cache: false}) {\n\tlet data = lscache.get(url);\n\tif (data) {\n\t\treturn Promise.resolve(data);\n\t} else {\n\t\treturn fetch(url)\n\t\t\t.then(checkResponseStatus)\n\t\t\t.then(parseJson)\n\t\t\t.then(cacheResponse(options.cache, options.ttl, url));\n\t}\n}\n\nexport function putJson(url, data) {\n\treturn fetch(url, {\n\t\tmethod: 'put',\n\t\theaders: {\n\t\t\t'Accept': 'application/json',\n\t\t\t'Content-Type': 'application/json'\n\t\t},\n\t\t\tbody: JSON.stringify(data)\n\t\t})\n\t\t.then(checkResponseStatus);\n}\n</code></pre>\n<p>Now you can check with your browser tools that, if you load several times the same user, only the first one will issue request to GitHub.</p>\n<hr>\n<p>You can check the source code in <a href=\"https://github.com/PaquitoSoft/notetaker-ractive\">this GitHub repo</a>.</p>\n<hr>\n<h2>Ending</h2>\n<p>First of all, I want to thank you for getting all the way of this long tutorial until the end.\nI hope you found it insteresting and that you have learned something new that will be useful in the future.</p>\n<p>I decided to write this tutorial not only because I want to spread the word about <a href=\"http://www.ractivejs.org/\">Ractive.js</a> (note that I'm not involved in the project at all; I'm only one of its users), but because in my carrer I have read many many tutorials that helped me to be a better developer and I wanted to give back the same to the community.</p>\n<p>If you liked this tutorial, please talk about it in your favorite social network or to your collegues, and you would make my day if you drop me a line by e-mail (paquitosoftware at gmail.com) or in Twitter (@telemaco82).</p>\n<hr>\n"},{"slug":"ractive-js-tutorial-managing-users-notes","title":"Ractive.js tutorial - Managing user's notes (5 of 6)","creationDate":"2015-08-02T11:03:31.081Z","keywords":"tutorial, javascript, ractive, ractivejs","status":"published","excerpt":"<p>(<em>Previous step: <a href=\"/post/ractive-js-tutorial-loading-user-info\">Loading user info</a></em>)</p>\n<p>Now we want to add to our little application the ability to create and delete notes for the users we can already see.\nWe will have a collection of notes for every user.</p>\n<p>We need somewhere to store that notes and, for this tutorial, we'll use <a href=\"https://www.firebase.com/\">Firebase</a> free plan service.\nIf you don't have an account, go and create one. Once you have it, create a new APP from your account page.\nNow that you have your APP created, take note of its URL, as we'll be using it to integrate our application using <a href=\"https://www.firebase.com/docs/rest/quickstart.html\">Firebase REST API</a>.\nThe URL should be something like this: https://ps-github-saver.firebaseio.com/.</p>\n<p>First of all, we're going to populate our notes component, as right now it's empty.\nWe could just put all the code in the <em>notes-section</em> component, but for the sake of modularity (it would also help with the testing), we will have another two components:</p>\n<ul>\n<li>add-note: a little component to handle notes creation.</li>\n<li>notes-list: a little component to show current notes and allow removing them.</li>\n</ul>\n","content":"<p>(<em>Previous step: <a href=\"/post/ractive-js-tutorial-loading-user-info\">Loading user info</a></em>)</p>\n<p>Now we want to add to our little application the ability to create and delete notes for the users we can already see.\nWe will have a collection of notes for every user.</p>\n<p>We need somewhere to store that notes and, for this tutorial, we'll use <a href=\"https://www.firebase.com/\">Firebase</a> free plan service.\nIf you don't have an account, go and create one. Once you have it, create a new APP from your account page.\nNow that you have your APP created, take note of its URL, as we'll be using it to integrate our application using <a href=\"https://www.firebase.com/docs/rest/quickstart.html\">Firebase REST API</a>.\nThe URL should be something like this: https://ps-github-saver.firebaseio.com/.</p>\n<p>First of all, we're going to populate our notes component, as right now it's empty.\nWe could just put all the code in the <em>notes-section</em> component, but for the sake of modularity (it would also help with the testing), we will have another two components:</p>\n<ul>\n<li>add-note: a little component to handle notes creation.</li>\n<li>notes-list: a little component to show current notes and allow removing them.</li>\n</ul>\n<p>Let's go for the sub-components:\n<strong><em>root-folder</em>/app/views/user/add-note.html</strong></p>\n<pre><code class=\"language-html\">&lt;form on-submit=&quot;createNote&quot;&gt;\n\t&lt;div class=&quot;input-group&quot;&gt;\n\t\t&lt;input type=&quot;text&quot; class=&quot;form-control&quot; value=&quot;{{newNote}}&quot; placeholder=&quot;Add new note...&quot; /&gt;\n\t\t&lt;span class=&quot;input-group-btn&quot;&gt;\n\t\t\t&lt;button class=&quot;btn btn-default&quot; type=&quot;submit&quot;&gt; Add &lt;/button&gt;\n\t\t&lt;/span&gt;\n\t&lt;/div&gt;\n&lt;/form&gt;\n</code></pre>\n<p><strong><em>root-folder</em>/app/js/components/user/notes/add-note.js</strong></p>\n<pre><code class=\"language-javascript\">import Ractive from 'ractive';\nimport User from '../../../models/user';\nimport Template from '../../../../views/user/notes/add-note.html';\n\nvar AddNote = Ractive.extend({\n\tisolated: true,\n\ttemplate: Template,\n\toninit: function() {\n\t\tthis.on('createNote', (rEvent) =&gt; {\n\t\t\trEvent.original.preventDefault();\n\t\t\tthis.fire('AddUserNote', rEvent.context.newNote);\n\t\t\tthis.set('newNote', '');\n\t\t});\n\t},\n\tdata: {\n\t\tnewNote: ''\n\t}\n});\n\nexport default AddNote;\n</code></pre>\n<p>This component just shows an input with a button so we can type our note and proceed saving it.\nThe <strong>createNote</strong> proxy event just fires a custom event with the introduced note message.\nThis event will bubble up through all parent components so any of them (the right one) can handle it.</p>\n<p>Now, the <em>notes-list</em> component.\n<strong><em>root-folder</em>/app/views/user/notes/notes-list.html</strong></p>\n<pre><code class=\"language-html\">&lt;ul class=&quot;list-group&quot;&gt;\n\t{{#each notes}}\n\t\t&lt;li class=&quot;list-group-item&quot;&gt;\n\t\t\t&lt;span&gt;{{.}}&lt;/span&gt;\n\t\t\t&lt;span class=&quot;pull-right&quot;&gt;\n\t\t\t\t&lt;span class=&quot;glyphicon glyphicon-remove&quot; on-click=&quot;deleteNote&quot; style=&quot;cursor: pointer;&quot;&gt;&lt;/span&gt;\n\t\t\t&lt;/span&gt;\n\t\t&lt;/li&gt;\n\t{{/each}}\n&lt;/ul&gt;\n</code></pre>\n<p><strong><em>root-folder</em>/app/js/components/user/notes/notes-list.js</strong></p>\n<pre><code class=\"language-javascript\">import Ractive from 'ractive';\nimport Template from '../../../views/user/notes/notes-list.html';\n\nvar NotesList = Ractive.extend({\n\tisolated: true,\n\ttemplate: Template,\n\toninit() {\n\t\tthis.on('deleteNote', (rEvent) =&gt; {\n\t\t\t\tthis.fire('RemoveUserNote', rEvent.context);\n\t\t});\n\t}\n});\n\nexport default NotesList;\n</code></pre>\n<p>In the <strong>deleteNote</strong> proxy event, we just fire a custom event with the message we want to delete.</p>\n<p>Now we need to update our <em>notes-section</em> component so it uses those new sub-components:\n<strong><em>root-folder</em>/app/views/user/notes-section.html</strong></p>\n<pre><code class=\"language-html\">&lt;div&gt;\n\t&lt;h3&gt; Notes &lt;/h3&gt;\n\t&lt;AddNote /&gt;\n\t&lt;br/&gt;\n\t&lt;NotesList notes=&quot;{{notes}}&quot; /&gt;\n&lt;/div&gt;\n</code></pre>\n<p>Note that we pass the notes list from the parent component to the <em>notes-list</em> subcomponent.</p>\n<p><strong><em>root-folder</em>/app/js/components/user/notes-section.js</strong></p>\n<pre><code class=\"language-javascript\">'use strict';\n\nimport Ractive from 'ractive';\nimport AddNote from './notes/add-note';\nimport NotesList from './notes/notes-list';\nimport template from '../../views/user/notes-section.html';\n\nvar NotesSection = Ractive.extend({\n\tisolated: true,\n\ttemplate: template,\n\tcomponents: {\n\t\tAddNote: AddNote,\n\t\tNotesList: NotesList\n\t}\n});\n\nexport default NotesSection;\n</code></pre>\n<p>We just need to update our user page view to pass the notes collection to this section:\n<strong><em>root-folder</em>/app/views/user-page.html</strong></p>\n<pre><code class=\"language-html\">&lt;div class=&quot;row&quot;&gt;\n\t&lt;div class=&quot;col-md-4&quot;&gt;\n\t\t&lt;UserProfile profile=&quot;{{user.profile}}&quot; /&gt;\n\t&lt;/div&gt;\n\t&lt;div class=&quot;col-md-4&quot;&gt;\n\t\t&lt;Repos repos=&quot;{{user.repos}}&quot; /&gt;\n\t&lt;/div&gt;\n\t&lt;div class=&quot;col-md-4&quot;&gt;\n\t\t&lt;Notes notes=&quot;{{user.notes}}&quot; /&gt;\n\t&lt;/div&gt;\n&lt;/div&gt;\n</code></pre>\n<p>We have all the notes stuff set up, but it's not functional yet as no one is managing reading and saving data to <em>Firebase</em>.\nI think reading should be done in the <strong>findByUsername</strong> function from the user model object, so when the user page gets loaded, we have all its needed information.\nOn the other hand, creating and removing notes should be done from the user page component through the user model object. The user page component is the component who knows which user we're diplaying, so it will be the one listening to sub-component custom events.</p>\n<p>Let's begin by reading user's notes.\n<strong><em>root-folder</em>/app/js/models/user.js</strong></p>\n<pre><code class=\"language-javascript\">import * as ajax from '../plugins/ajax';\n\nconst GITHUB_BASE_URL = 'https://api.github.com';\nconst FIREBASE_BASE_URL = `https://ps-github-saver.firebaseio.com`;\n\nclass User {\n\t\n\tconstructor(profile, repos, notes) {\n\t\tthis.profile = profile;\n\t\tthis.repos = repos;\n\t\tthis.notes = notes || []; // Default parameters values are only valid for undefined ones\n\t}\n\n\tstatic findByName(username) {\n\t\tlet userProfileUrl = `${GITHUB_BASE_URL}/users/${username}`,\n\t\t\tuserReposUrl = `${GITHUB_BASE_URL}/users/${username}/repos`,\n\t\t\tuserNotesUrl = `${FIREBASE_BASE_URL}/${username.toLowerCase()}.json`;\n\n\t\tlet result = new Promise((resolve, reject) =&gt; {\n\t\t\tPromise.all([\n\t\t\t\tajax.getJson(userProfileUrl),\n\t\t\t\tajax.getJson(userReposUrl),\n\t\t\t\tajax.getJson(userNotesUrl)\n\t\t\t])\n\t\t\t.then(values =&gt; {\n\t\t\t\t\tresolve(new User(values[0], values[1], values[2]));\n\t\t\t})\n\t\t\t.catch(reject);\n\t\t});\n\n\t\treturn result;\n\t}\n}\n\nexport default User;\n</code></pre>\n<p>We just need to declare the URL for the user's notes in our Firebase project and add another <em>getJson</em> promise to our group.</p>\n<p>Now we handle notes creation (in our user page component) so we can see anything in the notes list.\n<strong><em>root-folder</em>/app/js/components/user-page.js</strong>:</p>\n<pre><code class=\"language-javascript\">import Ractive from 'ractive';\nimport Template from '../../views/user-page.html';\nimport UserProfile from './user/profile-section';\nimport Repos from './user/repos-section';\nimport Notes from './user/notes-section';\n\nvar UserPage = Ractive.components.UserPage = Ractive.extend({\n\ttemplate: Template,\n\tcomponents: {\n\t\tUserProfile: UserProfile,\n\t\tRepos: Repos,\n\t\tNotes: Notes\n\t},\n\toninit() {\n\t\tthis.observe('req', (request) =&gt; {\n\t\t\tthis.set('user', request.body.user);\n\t\t});\n\n\t\t// *.*, *.AddUserNote, AddNote.*, AddNote.AddUserNote\n\t\tthis.on('*.AddUserNote', (newNote) =&gt; {\n\t\t\tconsole.log('UserPage::createNote# Adding new note to user:', this.get('user').profile.login);\n\t\t\tthis.get('user').addNote(newNote);\n\t\t});\n\t}\n});\nUserPage._name = 'UserPage';\n\nexport default UserPage;\n</code></pre>\n<p>The custom events fired from components get their names namespaced. The final event name is built beginning with the name of the component where it was generated, followed by a dot and the name you used when firing the event.\nWhen you register to events, you have the chance to use a wildcard both for the name of the component as well as the name of the event (see the comment above the event handler).</p>\n<p>We now need to implement the <strong>addNote</strong> function in the user model.\n<strong><em>root-folder</em>/app/js/models/user.js</strong></p>\n<pre><code class=\"language-javascript\">import * as ajax from '../plugins/ajax';\n\nconst GITHUB_BASE_URL = 'https://api.github.com';\nconst FIREBASE_BASE_URL = `https://ps-github-saver.firebaseio.com`;\n\nclass User {\n\t\n\tconstructor(profile, repos, notes) {\n\t\tthis.profile = profile;\n\t\tthis.repos = repos;\n\t\tthis.notes = notes || []; // Default parameters values are only valid for undefined ones\n\t}\n\n\taddNote(newNote) {\n\t\tthis.notes.push(newNote);\n\t\treturn ajax.putJson(`${FIREBASE_BASE_URL}/${this.profile.login.toLowerCase()}.json`, this.notes);\n\t}\n\n\tstatic findByName(username) {\n\t\tlet userProfileUrl = `${GITHUB_BASE_URL}/users/${username}`,\n\t\t\tuserReposUrl = `${GITHUB_BASE_URL}/users/${username}/repos`,\n\t\t\tuserNotesUrl = `${FIREBASE_BASE_URL}/${username.toLowerCase()}.json`;\n\n\t\tlet result = new Promise((resolve, reject) =&gt; {\n\t\t\tPromise.all([\n\t\t\t\tajax.getJson(userProfileUrl),\n\t\t\t\tajax.getJson(userReposUrl),\n\t\t\t\tajax.getJson(userNotesUrl)\n\t\t\t])\n\t\t\t.then(values =&gt; {\n\t\t\t\tresolve(new User(values[0], values[1], values[2]));\n\t\t\t})\n\t\t\t.catch(reject);\n\t\t});\n\n\t\treturn result;\n\t}\n}\n\nexport default User;\n</code></pre>\n<p>Here we're adding the new notes to the users note's list so it get updated inmediatly and Ractive will update the view to reflect this change before the note is actually persisted.\nThen, we call a new ajax pluging's function (<em>putJson</em>) to save the note in Firebase.</p>\n<p>Most of the time, save operation will work, so I prefer to not wait for the back-end response so the user feels our application is blazing fast.\nIn real world applications we would (for example) implement a mechanism so, if the operation fails, we warn the user and we undo the operation.</p>\n<p>Let's add the <strong>putJson</strong> function to our ajax component:\n<strong><em>root-folder</em>/app/js/plugins/ajax.js</strong></p>\n<pre><code class=\"language-javascript\">function checkResponseStatus(res) {\n\tif (res.status &lt; 400) {\n\t\treturn res;\n\t} else {\n\t\tlet error = new Error(res.statusText);\n\t\terror.statusCode = res.status;\n\t\terror.response = res;\n\t\tthrow error;\n\t}\n}\n\nfunction parseJson(res) {\n\treturn res.json();\n}\n\nexport function getJson(url, options = {cache: false}) {\n\treturn fetch(url)\n\t\t.then(checkResponseStatus)\n\t\t.then(parseJson);\n}\n\nexport function putJson(url, data) {\n\treturn fetch(url, {\n\t\tmethod: 'put',\n\t\theaders: {\n\t\t\t'Accept': 'application/json',\n\t\t\t'Content-Type': 'application/json'\n\t\t},\n\t\tbody: JSON.stringify(data)\n\t})\n\t.then(checkResponseStatus);\n}\n</code></pre>\n<p>If you reload the application in your browser right now, you should be able to save notes.</p>\n<p>The last step is to add notes removing functionality.\nWe will follow the same pattern: fire a custom event from the sub-component (<em>notes-list</em>) and handle it from the user page through user model.\nWhen we created the <em>notes-list</em> component, we already configured the view and the behavior to fire that event, so we just need to update the user page and the user model:\n<strong><em>root-folder</em>/app/js/components/user-page.js</strong> (<em>add 'RemoveUserNote' event handler</em>)</p>\n<pre><code class=\"language-javascript\">import Ractive from 'ractive';\nimport Template from '../../views/user-page.html';\nimport UserProfile from './user/profile-section';\nimport Repos from './user/repos-section';\nimport Notes from './user/notes-section';\n\nvar UserPage = Ractive.components.UserPage = Ractive.extend({\n\ttemplate: Template,\n\tcomponents: {\n\t\tUserProfile: UserProfile,\n\t\tRepos: Repos,\n\t\tNotes: Notes\n\t},\n\toninit() {\n\t\tthis.observe('req', (request) =&gt; {\n\t\t\tthis.set('user', request.body.user);\n\t\t});\n\n\t\t// *.*, *.AddUserNote, AddNote.*, AddNote.AddUserNote\n\t\tthis.on('*.AddUserNote', (newNote) =&gt; {\n\t\t\tconsole.log('UserPage::createNote# Adding new note to user:', this.get('user').profile.login);\n\t\t\tthis.get('user').addNote(newNote);\n\t\t});\n\n\t\tthis.on('*.RemoveUserNote', (note) =&gt; {\n\t\t\tthis.get('user').removeNote(note);\n\t\t});\n\t}\n});\nUserPage._name = 'UserPage';\n\nexport default UserPage;\n</code></pre>\n<p><strong><em>root-folder</em>/app/js/models/user.js</strong> (<em>add 'removeNote' function</em>)</p>\n<pre><code class=\"language-javascript\">import * as ajax from '../plugins/ajax';\n\nconst GITHUB_BASE_URL = 'https://api.github.com';\nconst FIREBASE_BASE_URL = `https://ps-github-saver.firebaseio.com`;\n\nclass User {\n\t\n\tconstructor(profile, repos, notes) {\n\t\tthis.profile = profile;\n\t\tthis.repos = repos;\n\t\tthis.notes = notes || []; // Default parameters values are only valid for undefined ones\n\t}\n\n\taddNote(newNote) {\n\t\tthis.notes.push(newNote);\n\t\treturn ajax.putJson(`${FIREBASE_BASE_URL}/${this.profile.login.toLowerCase()}.json`, this.notes);\n\t}\n\n\tremoveNote(note) {\n\t\tvar index = this.notes.indexOf(note);\n\t\tif (index &gt;= 0) {\n\t\t\tthis.notes.splice(index, 1);\n\t\t\treturn ajax.putJson(`${FIREBASE_BASE_URL}/${this.profile.login.toLowerCase()}.json`, this.notes);\n\t\t}\n\t}\n\n\tstatic findByName(username) {\n\t\tlet userProfileUrl = `${GITHUB_BASE_URL}/users/${username}`,\n\t\t\tuserReposUrl = `${GITHUB_BASE_URL}/users/${username}/repos`,\n\t\t\tuserNotesUrl = `${FIREBASE_BASE_URL}/${username.toLowerCase()}.json`;\n\n\t\tlet result = new Promise((resolve, reject) =&gt; {\n\t\t\tPromise.all([\n\t\t\t\tajax.getJson(userProfileUrl),\n\t\t\t\tajax.getJson(userReposUrl),\n\t\t\t\tajax.getJson(userNotesUrl)\n\t\t\t])\n\t\t\t.then(values =&gt; {\n\t\t\t\tresolve(new User(values[0], values[1], values[2]));\n\t\t\t})\n\t\t\t.catch(reject);\n\t\t});\n\n\t\treturn result;\n\t}\n}\n\nexport default User;\n</code></pre>\n<p>So, this is it.\nYou have used some of the main parts of Ractive along the way, but it has much more than this to offer.\nI strongly recommend to (first) follow the <a href=\"http://learn.ractivejs.org/hello-world/1/\">official tutorials</a> and (second) to read its <a href=\"http://docs.ractivejs.org/latest/get-started\">documentation</a>.</p>\n<p>We have some things we can improve with little effort in our application that we will accomplish in the last step of the tutorial.</p>\n<hr>\n<p>You can check the source code in <a href=\"https://github.com/PaquitoSoft/notetaker-ractive\">this GitHub repo</a>.</p>\n<hr>\n<p>Previous post: <a href=\"/post/ractive-js-tutorial-loading-user-info\">Loading user info</a>\nNext post: <a href=\"/post/ractive-js-tutorial-the-final-touch\">The final touch</a></p>\n<hr>\n"},{"slug":"ractive-js-tutorial-loading-user-info","title":"Ractive.js tutorial - Loading user info (4 of 6)","creationDate":"2015-08-01T19:08:30.642Z","keywords":"tutorial, javascript, ractive, ractivejs","status":"published","excerpt":"<p>(<em>Previous step</em>: <a href=\"/post/ractive-js-tutorial-routing\">Routing</a>)</p>\n<p>Rigth now our page shows nothing but some labels.\nThe next step is to allow our users to search for a GitHub user and, if it's found, show his info in the specific page.</p>\n<p>We will be requesting data to the <a href=\"https://developer.github.com/v3/\">GitHub REST API</a>.\nThese are the endpoints we'll be hitting:</p>\n<ul>\n<li>https://api.github.com/users/{username}: Get user main info</li>\n<li>https://api.github.com/users/{username}/repos: Get user's repositories data</li>\n</ul>\n<h2>Polyfills</h2>\n<p>To implement third party integration, we will be usign two new <em>ES2015</em> APIs which are not already arrived to all browsers, so we need to include some polyfills in our application for them: <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API\">fetch</a> and <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise\">Promise</a>.</p>\n<p>We will need to update our <strong>webpack</strong> configuration to include in our JS bundle these polyfills.</p>\n<p>First, we need to install the polyfills and a couple of <em>webpack</em> plugins:</p>\n<pre><code>$ npm install es6-promise whatwg-fetch --save\n$ npm install imports-loader exports-loader --save-dev\n</code></pre>\n","content":"<p>(<em>Previous step</em>: <a href=\"/post/ractive-js-tutorial-routing\">Routing</a>)</p>\n<p>Rigth now our page shows nothing but some labels.\nThe next step is to allow our users to search for a GitHub user and, if it's found, show his info in the specific page.</p>\n<p>We will be requesting data to the <a href=\"https://developer.github.com/v3/\">GitHub REST API</a>.\nThese are the endpoints we'll be hitting:</p>\n<ul>\n<li>https://api.github.com/users/{username}: Get user main info</li>\n<li>https://api.github.com/users/{username}/repos: Get user's repositories data</li>\n</ul>\n<h2>Polyfills</h2>\n<p>To implement third party integration, we will be usign two new <em>ES2015</em> APIs which are not already arrived to all browsers, so we need to include some polyfills in our application for them: <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API\">fetch</a> and <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise\">Promise</a>.</p>\n<p>We will need to update our <strong>webpack</strong> configuration to include in our JS bundle these polyfills.</p>\n<p>First, we need to install the polyfills and a couple of <em>webpack</em> plugins:</p>\n<pre><code>$ npm install es6-promise whatwg-fetch --save\n$ npm install imports-loader exports-loader --save-dev\n</code></pre>\n<p>Now, we update the <em>webpack</em> configuration file:</p>\n<pre><code class=\"language-javascript\">var webpack = require('webpack');\n\nmodule.exports = {\n\tentry: './app/js/app.js',\n\toutput: {\n\t\tfilename: 'app/js/dist/bundle.js'\n\t},\n\tmodule: {\n\t\tloaders: [\n\t\t\t{\n\t\t\t\ttest: /\\\\.js$/,\n\t\t\t\texclude: /(node_modules|bower_components)/,\n\t\t\t\tloader: 'babel'\n\t\t\t},\n\t\t\t{\n\t\t\t\ttest: /\\\\.html$/,\n\t\t\t\tloader: 'raw'\n\t\t\t}\n\t\t]\n\t},\n\t// This is to load polyfills (http://mts.io/2015/04/08/webpack-shims-polyfills/)\n\tplugins: [\n\t\tnew webpack.ProvidePlugin({\n\t\t\tfetch: 'imports?this=&gt;global!exports?global.fetch!whatwg-fetch',\n\t\t\t'es6-promise': 'es6-promise'\n\t\t})\n\t]\n};\n</code></pre>\n<h2>Search user component</h2>\n<p>Before we make any request, we must update our <em>SearchUser</em> component to handle username submission and navigate to user page.\nJust update its <em>searchUser</em> <a href=\"http://docs.ractivejs.org/latest/proxy-events\">proxy event</a> to get the username introduced by our user and try to navigate to the corresponding URL.\n<strong><em>root-folder</em>/app/js/components/layout/search-user.js</strong></p>\n<pre><code class=\"language-javascript\">import Ractive from 'ractive';\nimport Template from '../../../views/layout/search-user.html';\nimport * as router from '../../plugins/router';\n\nvar SearchGithub = Ractive.extend({\n\tisolated: true,\n\ttemplate: Template,\n\n\toninit() {\n\t\tthis.on('searchUser', (rEvent) =&gt; {\n\t\t\trEvent.original.preventDefault();\n\t\t\trouter.navTo(`/user/${rEvent.context.query}`);\n\t\t\tthis.set('query', '');\n\t\t});\n\t},\n\n\tdata: {\n\t\t\tquery: ''\n\t}\n});\n\nexport default SearchGithub;\n</code></pre>\n<p>We've just imported the router plugin and configured the <em>serachUser</em> handler to call plugin's navigation function passing the URL we want to visit (note the <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/template_strings\">string interpolation</a> to build the URL).</p>\n<p>Now, when we type a username and submit the form, our router will call our '/user/:username' URL handler (defined in our <em>/app/js/config/routes.js</em> file).\nWe need to update that handler to perform our action, in this case, load user's info and repos data.</p>\n<h2>Ajax plugin</h2>\n<p>Instead of implement all the logic to fetch user related data in the route handler, we'll be using several objects to separete concerns.\nIn one hand, we'll have a plugin to deal with <em>AJAX</em> request (we'll use the new, in progress, <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API\">fetch API</a>). On the other hand we'll have a model object to represent a user so it will have all the logic related with users operations.</p>\n<p>Let's first create the ajax plugin:\n<strong><em>root-folder</em>/app/js/plugins/ajax.js</strong></p>\n<pre><code class=\"language-javascript\">function checkResponseStatus(res) {\n\tif (res.status &lt; 400) {\n\t\treturn res;\n\t} else {\n\t\tlet error = new Error(res.statusText);\n\t\terror.statusCode = res.status;\n\t\terror.response = res;\n\t\tthrow error;\n\t}\n}\n\nfunction parseJson(res) {\n\treturn new Promise((resolve) =&gt; {\n\t\tres.json().then(data =&gt; {\n\t\t\tresolve({\n\t\t\t\tjson: data,\n\t\t\t\turl: res.url\n\t\t\t});\n\t\t});\n\t});\n}\n\nexport function getJson(url) {\n\treturn fetch(url)\n\t\t.then(checkResponseStatus)\n\t\t.then(parseJson);\n}\n</code></pre>\n<p>Ok, this file exports a <em>getJson</em> function which allows to fetch JSON data and return a JS object.</p>\n<p>The <em>fetch</em> function returns a promise which will get a <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Response\">Response</a> object as response.\nWe chain that promise with another one which checks the response status and another one to extract the data from the json response.\nYou must remember something very important when using <em>fetch</em> function: if the endpoint responds with an error (for instance, a 4XX or 5XX response status code), the <em>fetch</em> function will not invoke the <em>reject</em> part of the promise it creates. That's why we need to first check for the status code of the response, before parsing its body.\nPersonally, I don't like this behavior and I hope this could change before closing this API specification.</p>\n<h2>User model</h2>\n<p>Next, we create our user <em>model</em>, where we encapsulate users state and behavior.\n<strong><em>root-folder</em>/app/js/models/user.js</strong></p>\n<pre><code class=\"language-javascript\">import * as ajax from '../plugins/ajax';\n\nconst GITHUB_BASE_URL = 'https://api.github.com';\n\nclass User {\n\t\n\tconstructor(profile, repos, notes) {\n\t\tthis.profile = profile;\n\t\tthis.repos = repos;\n\t\tthis.notes = notes || []; // Default parameters values are only valid for undefined ones\n\t}\n\n\tstatic findByName(username) {\n\t\tlet userProfileUrl = `${GITHUB_BASE_URL}/users/${username}`,\n\t\t\tuserReposUrl = `${GITHUB_BASE_URL}/users/${username}/repos`;\n\n\t\tlet result = new Promise((resolve, reject) =&gt; {\n\t\t\t\tPromise.all([\n\t\t\t\t\tajax.getJson(userProfileUrl),\n\t\t\t\tajax.getJson(userReposUrl),\n\t\t\t])\n\t\t\t.then(values =&gt; {\n\t\t\t\t\tresolve(new User(values[0], values[1]));\n\t\t\t})\n\t\t\t.catch(reject);\n\t\t});\n\n\t\treturn result;\n\t}\n}\n\nexport default User;\n</code></pre>\n<h2>Route handling</h2>\n<p>This is a <em>ES2015</em> class with its <em>constructor</em> function that gets invoked when we create a new instance and a <em>static</em> function which allows to call it without creating a new instance.\nSince our <em>ajax</em> plugin uses the <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API\"><em>fetch</em></a> API and it returns promises, here we use the <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/all\">Promise.all</a> function which allows to group several promises and get notified when all of them have completed (<em>or when one of them has failed</em>).</p>\n<p>Now we need to update our routing configuration so that when the user page URL gets requested, we use this user model object to fetch needed data.\n<strong><em>root-folder</em>/app/js/config/routes.js</strong></p>\n<pre><code class=\"language-javascript\">'use strict';\n\nimport router from '../plugins/router';\nimport HomePage from '../components/home-page';\nimport UserPage from '../components/user-page';\nimport UserModel from '../models/user';\n\nvar routes = new Map();\n\nroutes.set('/', (context, next) =&gt; {\n\tnext(null, HomePage);\n});\n\nroutes.set('/user/:username', (context, next) =&gt; {\n\tUserModel.findByName(context.params.username)\n\t.then((user) =&gt; {\n\t\t\tnext(null, UserPage, {\n\t\t\t\tuser: user\n\t\t});\n\t})\n\t.catch((err) =&gt; {\n\t\t\tnext(err);\n\t});\n});\n\nexport default routes;\n</code></pre>\n<p>We get the username from the context parameter and use it to call the user model <em>findByName</em> function so we get user's instance model object.\nWe then call <em>next</em> so the control gets to the <em>App</em> instance, which updates the <em>componentName</em> (page to be shown) and the request data.\nJust to remember...\n<strong><em>root-folder</em>/app/js/app.js</strong></p>\n<pre><code class=\"language-javascript\">...\nonNavigation(error, navigationContext) {\n\t\tconsole.log('APP::onNavigation# Navigating to:', navigationContext.pageName, 'with context:', navigationContext);\n\n\t\tif (error) {\n\t\t\tconsole.warn('App::onNavigation# Error navigating:', error);\n\t\t} else {\n\t\t\tthis.set({\n\t\t\t\treq: {\n\t\t\t\t\tparams: navigationContext.params,\n\t\t\t\t\tbody: navigationContext.state\n\t\t\t\t},\n\t\t\t\tcomponentName: navigationContext.pageName\n\t\t\t});\n\t\t}\n\t}\n...\n</code></pre>\n<p>Now we need to modify our user page component so, when the request data get updated, it updates its <em>user</em> data attribute so the presentation show the new data.\n<strong><em>root-folder</em>/app/js/components/user-page.js</strong></p>\n<pre><code class=\"language-javascript\">import Ractive from 'ractive';\nimport Template from '../../views/user-page.html';\nimport UserProfile from './user/profile-section';\nimport Repos from './user/repos-section';\nimport Notes from './user/notes-section';\n\nvar UserPage = Ractive.components.UserPage = Ractive.extend({\n\ttemplate: Template,\n\tcomponents: {\n\t\tUserProfile: UserProfile,\n\t\tRepos: Repos,\n\t\tNotes: Notes\n\t},\n\toninit() {\n\t\tthis.observe('req', (request) =&gt; {\n\t\t\tthis.set('user', request.body.user);\n\t\t});\n\t}\n});\nUserPage._name = 'UserPage';\n\nexport default UserPage;\n</code></pre>\n<p>When the page component is initialized, it begins observing for changes in the <em>req</em> data context attribute (which is handled by the <em>App</em> instance).\nAs we didn't set pages objects as isolated, they will get notified when that attribute gets updated.</p>\n<p>If you try to search for a user right now, you won't see any data in your browser, but you won't see any error neither. This is because there's something missing.\nRemember pages components are the only ones <em>non isolated</em>, so we need to pass the right user's data to its reusable components.\nWe need to update our user's page view:\n<strong><em>root-folder</em>/app/views/user-page.html</strong></p>\n<pre><code class=\"language-html\">&lt;div class=&quot;row&quot;&gt;\n\t&lt;div class=&quot;col-md-4&quot;&gt;\n\t\t&lt;UserProfile profile=&quot;{{user.profile}}&quot; /&gt;\n\t&lt;/div&gt;\n\t&lt;div class=&quot;col-md-4&quot;&gt;\n\t\t&lt;Repos repos=&quot;{{user.repos}}&quot; /&gt;\n\t&lt;/div&gt;\n\t&lt;div class=&quot;col-md-4&quot;&gt;\n\t\t&lt;Notes /&gt;\n\t&lt;/div&gt;\n&lt;/div&gt;\n</code></pre>\n<p>Now, if you load the app in your browser and search for a user, you must see his profile data and repos.\n<img src=\"/content/images/2015/08/ractive-tutorial-08.png\" alt=\"\"></p>\n<hr>\n<p>You can check the source code in <a href=\"https://github.com/PaquitoSoft/notetaker-ractive\">this GitHub repo</a>.</p>\n<hr>\n<p>Previous post: <a href=\"/post/ractive-js-tutorial-routing\">Routing</a>\nNext post: <a href=\"/post/ractive-js-tutorial-managing-users-notes\">Managing user's notes</a></p>\n<hr>\n"},{"slug":"ractive-js-tutorial-routing","title":"Ractive.js tutorial - Routing (3 of 6)","creationDate":"2015-08-01T15:15:44.447Z","keywords":"tutorial, javascript, ractive, ractivejs","status":"published","excerpt":"<p>(<em>Previous step</em>: <a href=\"/post/ractive-js-tutorial-creating-the-barebones\">Creating the barebones</a>)</p>\n<p><em>Ractive</em> does not have its own <a href=\"http://docs.ractivejs.org/latest/routing\">routing system</a> becouse it is a library, not a framework, and routing is not part of its goal.\nIn the link above you can see they recommend:</p>\n<ul>\n<li><a href=\"http://backbonejs.org/#Router\">Backbone.Router</a></li>\n<li><a href=\"https://visionmedia.github.io/page.js/\">PageJS</a></li>\n</ul>\n<p>There is also a Ractive specific router built by Martin Kolarik you can check:</p>\n<ul>\n<li><a href=\"https://github.com/MartinKolarik/ractive-route\">Ractive-route</a></li>\n</ul>\n<p>As I already have some experience with <em>PageJS</em> I will be using that library for implementing a custom made routing subsystem.</p>\n","content":"<p>(<em>Previous step</em>: <a href=\"/post/ractive-js-tutorial-creating-the-barebones\">Creating the barebones</a>)</p>\n<p><em>Ractive</em> does not have its own <a href=\"http://docs.ractivejs.org/latest/routing\">routing system</a> becouse it is a library, not a framework, and routing is not part of its goal.\nIn the link above you can see they recommend:</p>\n<ul>\n<li><a href=\"http://backbonejs.org/#Router\">Backbone.Router</a></li>\n<li><a href=\"https://visionmedia.github.io/page.js/\">PageJS</a></li>\n</ul>\n<p>There is also a Ractive specific router built by Martin Kolarik you can check:</p>\n<ul>\n<li><a href=\"https://github.com/MartinKolarik/ractive-route\">Ractive-route</a></li>\n</ul>\n<p>As I already have some experience with <em>PageJS</em> I will be using that library for implementing a custom made routing subsystem.</p>\n<h2>User page</h2>\n<p>Right now we only have implemented our <em>home</em> page so let's begin by creating our <em>user</em> page.\nThis page will have three sections: Github user profile, Github user repos and our persisted notes about the user.\nLet's create the sections and then, the page which uses them.</p>\n<p><strong><em>root-folder</em>/app/views/user/profile-section.html</strong></p>\n<pre><code class=\"language-html\">&lt;div&gt;\n\t&lt;h3&gt; User Profile &lt;/h3&gt;\n\t&lt;ul class=&quot;list-group&quot;&gt;\n\t\t{{#profile.avatar_url}}&lt;li class=&quot;list-group-item&quot;&gt; &lt;img src={{profile.avatar_url}} class=&quot;img-rounded img-responsive&quot; style=&quot;min-height: 261px;&quot;/&gt;&lt;/li&gt;{{/profile.avatar_url}}\n\t\t{{#profile.name}}&lt;li class=&quot;list-group-item&quot;&gt;Name: {{profile.name}}&lt;/li&gt;{{/profile.name}}\n\t\t{{#profile.login}}&lt;li class=&quot;list-group-item&quot;&gt;Username: {{profile.login}}&lt;/li&gt;{{/profile.login}}\n\t\t{{#profile.email}}&lt;li class=&quot;list-group-item&quot;&gt;Email: {{profile.email}}&lt;/li&gt;{{/profile.email}}\n\t\t{{#profile.location}}&lt;li class=&quot;list-group-item&quot;&gt;Location: {{profile.location}}&lt;/li&gt;{{/profile.location}}\n\t\t{{#profile.company}}&lt;li class=&quot;list-group-item&quot;&gt;Company: {{profile.company}}&lt;/li&gt;{{/profile.company}}\n\t\t{{#profile.followers}}&lt;li class=&quot;list-group-item&quot;&gt;Followers: {{profile.followers}}&lt;/li&gt;{{/profile.followers}}\n\t\t{{#profile.following}}&lt;li class=&quot;list-group-item&quot;&gt;Following: {{profile.following}}&lt;/li&gt;{{/profile.following}}\n\t\t{{#profile.public_repos}}&lt;li class=&quot;list-group-item&quot;&gt;Public Repos: {{profile.public_repos}}&lt;/li&gt;{{/profile.public_repos}}\n\t\t{{#profile.blog}}&lt;li class=&quot;list-group-item&quot;&gt;Blog: &lt;a href=&quot;{{profile.blog}}&quot; target=&quot;_blank&quot;&gt;{{profile.blog}}&lt;/a&gt;&lt;/li&gt;{{/profile.blog}}\n\t&lt;/ul&gt;\n&lt;/div&gt;\n</code></pre>\n<p><strong><em>root-folder</em>/app/js/components/user/profile-section.js</strong></p>\n<pre><code class=\"language-language-javascript\">import Ractive from 'ractive';\nimport Template from '../../../views/user/profile-section.html';\n\nvar UserProfileSection = Ractive.extend({\n\t\tisolated: true,\n\ttemplate: Template\n});\n\nexport default UserProfileSection;\n</code></pre>\n<hr>\n<p><strong><em>root-folder</em>/app/views/user/repos-section.html</strong></p>\n<pre><code class=\"language-html\">&lt;div&gt;\n\t&lt;h3&gt;User repos ({{repos.length}})&lt;/h3&gt;\n\t&lt;ul class=&quot;list-group&quot;&gt;\n\t\t{{#each repos}}\n\t\t\t&lt;li class=&quot;list-group-item&quot;&gt;\n\t\t\t\t{{#html_url}}\n\t\t\t\t\t&lt;h4&gt;&lt;a href=&quot;{{html_url}}&quot; target=&quot;_blank&quot;&gt;{{name}}&lt;/a&gt;&lt;/h4&gt;\n\t\t\t\t{{/html_url}}\n\t\t\t\t{{#description}}\n\t\t\t\t\t&lt;p&gt;{{description}}&lt;/p&gt;\n\t\t\t\t{{/description}}\n\t\t\t&lt;/li&gt;\n\t\t{{/each}}\n\t&lt;/ul&gt;\n&lt;/div&gt;\n</code></pre>\n<p><strong><em>root-folder</em>/app/js/components/user/repos-section.js</strong></p>\n<pre><code class=\"language-language-javascript\">import Ractive from 'ractive';\nimport Template from '../../../views/user/repos-section.html';\n\nvar ReposSection = Ractive.extend({\n\t\tisolated: true,\n\ttemplate: Template\n\t// If we declare here data with attributes provided from\n\t// the template, it stops working\n\t// This is the nearest issue I found: https://github.com/ractivejs/ractive/issues/1977\n\t/*,\n\tdata: {\n\t\t\trepos: []\n\t}*/\n});\n\nexport default ReposSection;\n</code></pre>\n<hr>\n<p><strong><em>root-folder</em>/app/views/user/notes-section.html</strong></p>\n<pre><code class=\"language-html\">&lt;div&gt;\n\t&lt;h3&gt; Notes &lt;/h3&gt;\n\t&lt;p&gt;To be filled later...&lt;/p&gt;\n&lt;/div&gt;\n</code></pre>\n<p><strong><em>root-folder</em>/app/js/components/user/notes-section.js</strong></p>\n<pre><code class=\"language-language-javascript\">'use strict';\n\nimport Ractive from 'ractive';\nimport Template from '../../../views/user/notes-section.html';\n\nvar NotesSection = Ractive.extend({\n\t\tisolated: true,\n\ttemplate: Template\n});\n\nexport default NotesSection;\n</code></pre>\n<hr>\n<p>Finally, our <em>user</em> page which uses previous sections:\n<strong><em>root-folder</em>/app/views/user-page.html</strong></p>\n<pre><code class=\"language-html\">&lt;div class=&quot;row&quot;&gt;\n\t&lt;div class=&quot;col-md-4&quot;&gt;\n\t\t&lt;UserProfile /&gt;\n\t&lt;/div&gt;\n\t&lt;div class=&quot;col-md-4&quot;&gt;\n\t\t&lt;Repos /&gt;\n\t&lt;/div&gt;\n\t&lt;div class=&quot;col-md-4&quot;&gt;\n\t\t&lt;Notes /&gt;\n\t&lt;/div&gt;\n&lt;/div&gt;\n</code></pre>\n<p><strong><em>root-folder</em>/app/js/components/user-page.js</strong></p>\n<pre><code class=\"language-language-javascript\">import Ractive from 'ractive';\nimport Template from '../../views/user-page.html';\nimport UserProfile from './user/profile-section';\nimport Repos from './user/repos-section';\nimport Notes from './user/notes-section';\n\nvar UserPage = Ractive.extend({\n\t\ttemplate: Template,\n\tcomponents: {\n\t\t\tUserProfile: UserProfile,\n\t\tRepos: Repos,\n\t\tNotes: Notes\n\t}\n});\n\nexport default UserPage;\n</code></pre>\n<p>Now, to check that everything is ok, we can update the <em>App</em> to render this page instead of the home page.</p>\n<p>Modify these files like this:\n<strong><em>root-folder</em>/app/js/app.js</strong> (import and declare the new user page component):</p>\n<pre><code class=\"language-language-javascript\">import Ractive from 'ractive';\nimport template from '../views/app.html';\nimport SearchUserComponent from './components/layout/search-user';\nimport HomePageComponent from './components/home-page';\nimport UserPageComponent from './components/user-page'\n\nlet App = new Ractive({\n\t  el: '#app',\n  template: template,\n  components: {\n\t  \tSearchUser: SearchUserComponent,\n  \tHomePage: HomePageComponent,\n  \tUserPage: UserPageComponent\n  }\n});\n\nexport default App;\n</code></pre>\n<p><strong><em>root-folder</em>/app/views/app.html</strong> (change the main section)</p>\n<pre><code class=\"language-html\">&lt;div class=&quot;main-container&quot;&gt;\n\t&lt;nav class=&quot;navbar navbar-default&quot; role=&quot;navigation&quot;&gt;\n\t\t&lt;div class=&quot;col-sm-1&quot;&gt;\n\t\t\t&lt;a href=&quot;/&quot;&gt;\n\t\t\t\t&lt;h3&gt;Notetaker&lt;/h3&gt;\n\t\t\t&lt;/a&gt;\n\t\t&lt;/div&gt;\n\t\t&lt;div class=&quot;col-sm-7 col-sm-offset-1&quot; style=&quot;margin-top: 15px;&quot;&gt;\n\t\t\t&lt;SearchUser placeholder=&quot;Type a GitHub username...&quot; /&gt;\n\t\t&lt;/div&gt;\n\t&lt;/nav&gt;\n\t&lt;div class=&quot;container&quot;&gt;\n\t\t&lt;UserPage /&gt;\n\t&lt;/div&gt;\n&lt;/div&gt;\n</code></pre>\n<p>If you load the appliction right now, you should see something like this:\n<img src=\"/content/images/2015/08/ractive-tutorial-06.png\" alt=\"\"></p>\n<h2>Router component</h2>\n<p>Great, let's talk about routing...\nRight now, in our application template we're telling which page to use with this section:</p>\n<pre><code class=\"language-html\">&lt;div class=&quot;container&quot;&gt;\n  &lt;UserPage/&gt;\n&lt;/div&gt;\n</code></pre>\n<p>We want to use a custom component that uses the page component corresponding to the current route.\nWe will be creating a <em>Route</em> component which accepts an attribute indicating which page component it should render.\n<strong><em>root-folder</em>/app/js/component/layout/router.js</strong></p>\n<pre><code class=\"language-language-javascript\">import Ractive from 'ractive';\n\n/*\n\tThis router has been built on top of the ideas from this Stack Overflow question:\n\thttp://stackoverflow.com/questions/31075341/how-to-create-ractives-subcomponents-dynamically-and-change-them-programmatical\n*/\n\nvar Router = Ractive.extend({\n\t\ttemplate: '&lt;router-handler/&gt;',\n\tcomponents: {\n\t\t\t'router-handler': function() {\n\t\t\t\treturn this.get('componentName');\n\t\t}\n\t},\n\toninit: function() {\n\t\t\tthis.observe('componentName', function(newValue, oldValue) {\n\t\t\t\tif (this.fragment.rendered) {\n\t\t\t\t\tthis.reset();\n\t\t\t}\n\t\t});\n\t}\n});\n\nexport default Router;\n</code></pre>\n<p>There are a lot of things happening here:</p>\n<ol>\n<li>The template is very basic as it just needs what page component to use. We define a <em>route-handler</em> inner component which is linked in the second step.</li>\n<li>We define the inner component so that instead of being a component class, it is a function that returns the page component it should use. The page component will be a router data attribute which will be updated from the <em>App</em>. Take note that we don't define this component as isolated as we want it to be aware of the page component it should render, which will be handled from the <em>App</em> instance.</li>\n<li>When this <em>router</em> component is initialized, it registers a listener on the <em>componentName</em> data attribute from its context (which inherits from its parent, <em>App</em> instance) so that, every time it gets updated, this component calls its <strong>reset</strong> function, which causes it to re-render, using the new page component set in the <em>componentName</em> attribute.</li>\n<li>We have a conditional statement so we don't do this if the component has not been already rendered for the first time (bootstraping).</li>\n</ol>\n<p>Now we need to update our <em>App</em> instance so it makes use of this new component, instead of setting in its template which page component to use.\n<strong><em>root-folder</em>/app/views/app.html</strong></p>\n<pre><code class=\"language-html\">&lt;div class=&quot;main-container&quot;&gt;\n\t&lt;nav class=&quot;navbar navbar-default&quot; role=&quot;navigation&quot;&gt;\n\t\t&lt;div class=&quot;col-sm-1&quot;&gt;\n\t\t\t&lt;a href=&quot;/&quot;&gt;\n\t\t\t\t&lt;h3&gt;Notetaker&lt;/h3&gt;\n\t\t\t&lt;/a&gt;\n\t\t&lt;/div&gt;\n\t\t&lt;div class=&quot;col-sm-7 col-sm-offset-1&quot; style=&quot;margin-top: 15px;&quot;&gt;\n\t\t\t&lt;SearchUser placeholder=&quot;Type a GitHub username...&quot; /&gt;\n\t\t&lt;/div&gt;\n\t&lt;/nav&gt;\n\t&lt;div class=&quot;container&quot;&gt;\n\t\t&lt;Router componentName=&quot;{{componentName}}&quot;/&gt;\n\t&lt;/div&gt;\n&lt;/div&gt;\n</code></pre>\n<p>Take note about the attribute we're passing to Router component from the markup.</p>\n<p>We also need to update the <em>App</em> to create the <em>componentName</em> property so we can handle there the value for the page we must show.</p>\n<pre><code class=\"language-language-javascript\">import Ractive from 'ractive';\nimport template from '../views/app.html';\nimport SearchUserComponent from './components/layout/search-user';\nimport HomePageComponent from './components/home-page';\nimport UserPageComponent from './components/user-page'\n\nlet App = new Ractive({\n\t  el: '#app',\n  template: template,\n  components: {\n\t  \tSearchUser: SearchUserComponent,\n  \tHomePage: HomePageComponent,\n  \tUserPage: UserPageComponent\n  },\n  data: {\n\t  \tcomponentName: 'HomePage'\n  }\n});\n\nexport default App;\n</code></pre>\n<p>Now, if you reload your browser, you should see the <em>home</em> page again, and, if you change the <em>componentName</em> data attribute from <em>HomePage</em> to <em>UserPage</em> and reload your browser again, you should see the user page instead.</p>\n<p>Ok, so now we have the ability to show different pages from the <em>App</em>, but how do we link this to URL changes and how do we navigate from one to another?\nThis is when we begin using <a href=\"https://visionmedia.github.io/page.js/\">PageJS</a>. Like every other routing library, it allows us to be notified when the URL changes, it can force URL changes and it also allows to handle redirects.</p>\n<p>Take a moment to install the library in our project:</p>\n<pre><code>$ npm install page --save\n</code></pre>\n<p>We will create our own library module on top of <em>PageJS</em> which will be initialized from our <em>App</em> instance, getting passed the routing configuration, so it knows which function is has to invoke for every registerd route.</p>\n<p>Let's begin by defining routing configuration module:\n<strong><em>root-folder</em>/app/js/config/routes.js</strong></p>\n<pre><code class=\"language-language-javascript\">'use strict';\n\nimport router from '../plugins/router';\nimport HomePage from '../components/home-page';\nimport UserPage from '../components/user-page';\n\nvar routes = new Map();\n\nroutes.set('/', (context, next) =&gt; {\n\t\tnext(null, HomePage);\n});\n\nroutes.set('/user/:username', (context, next) =&gt; {\n\t\tnext(null, UserPage);\n});\n\nexport default routes;\n</code></pre>\n<p>Now, the router module:\n<strong><em>root-folder</em>/app/js/plugins/router.js</strong></p>\n<pre><code class=\"language-language-javascript\">import page from 'page';\nimport Ractive from 'ractive';\n\nfunction navigationHandler(routeHandler, onNavigation) {\n\t\treturn function(context/*, next*/) {\n\t\t\trouteHandler(context, (error, PageComponent = {}, data = {}) =&gt; {\n\t\t\t\tcontext.pageName = PageComponent._name;\n\t\t\tcontext.state = data;\n\t\t\tonNavigation(error, context);\n\t\t})\n\t};\n}\n\nexport function init(routes, onNavigation) {\n\t\n\troutes.forEach((routeHandler, path) =&gt; {\n\t\t\tpage(path, navigationHandler(routeHandler, onNavigation));\n\t});\n\n\tpage({\n\t\t\thashbang: true\n\t});\n}\n\nexport function navTo(url) {\n\t\tpage.show(url);\n}\n</code></pre>\n<p>The <em>init</em> function gets the configuration map and a callback as parameters. The second one will be invoked after the router handler gets executed with a <em>context</em> object containing routing information and the data passed from the route handler function (defined in the <em>routes.js</em> filed).\nThe last line in this file initializes <em>PageJS</em> so, by default, it intercepts all links and checks if we have a handler configured for them.\nWe also pass the configuration <em>hashbang: true</em> so we don't use HTML5 <em>pushState</em> and use the URL hash fragment instead, as we won't be using a server and the application would fail if we try to load an URL like this: http://localhost:8080/user/paquitosoft.</p>\n<p>This file also has a <em>navTo</em> function so we can programatically navigate to any route. We will use it from our <em>SearchUser</em> component.</p>\n<p>Ok, lets update our <em>App</em> instance to deal with routing with all we have done until now:\n<strong><em>root-folder</em>/app/js/app.js</strong></p>\n<pre><code class=\"language-language-javascript\">import Ractive from 'ractive';\nimport template from '../views/app.html';\n\nimport * as RouterPlugin from './plugins/router';\nimport routesConfiguration from './config/routes';\n\nimport RouterComponent from './components/layout/router';\nimport SearchUserComponent from './components/layout/search-user';\nimport HomePageComponent from './components/home-page';\nimport UserPageComponent from './components/user-page'\n\nlet App = new Ractive({\n\t\tel: '#app',\n\ttemplate: template,\n\tcomponents: {\n\t\t\tSearchUser: SearchUserComponent,\n\t\tRouter: RouterComponent,\n\t\tHomePage: HomePageComponent,\n\t\tUserPage: UserPageComponent\n\t},\n\tdata: {\n\t\t\tcomponentName: 'HomePage'\n\t},\n\toninit() {\n\t\t\tRouterPlugin.init(routesConfiguration, this.onNavigation.bind(this));\n\t\tconsole.log('App::oninit# Application initialized!');\n\t},\n\tonNavigation(error, navigationContext) {\n\t\t\tconsole.log('APP::onNavigation# Navigating to:', navigationContext.pageName, 'with context:', navigationContext);\n\n\t\tif (error) {\n\t\t\t\tconsole.warn('App::onNavigation# Error navigating:', error);\n\t\t} else {\n\t\t\t\tthis.set({\n\t\t\t\t\treq: {\n\t\t\t\t\t\tparams: navigationContext.params,\n\t\t\t\t\tbody: navigationContext.state\n\t\t\t\t},\n\t\t\t\tcomponentName: navigationContext.pageName\n\t\t\t});\n\t\t}\n\t}\n});\n\nexport default App;\n</code></pre>\n<p>Now, when the <em>App</em> is initialized, it configures the route module passing the routes configuration and a callback function.\nWhen the callback gets called, we update the data context setting the <em>componentName</em> attribute to the name of the page component we need to show. The value gets to this function in the <em>navigationContext</em> parameter which gets passed from the router plugin, which gets it from the routes configuration the <em>App</em> passed upon initialization.</p>\n<p>The last touch is to update the home page so we can test our navigation:\n<strong><em>root-folder</em>/app/views/app.html</strong></p>\n<pre><code class=\"language-html\">&lt;h2 class=&quot;text-center&quot;&gt;\n\tSearch by Github username above\n&lt;/h2&gt;\n&lt;p&gt;\n\tNav to &lt;a href=&quot;/user/paquitosoft&quot;&gt;User Page&lt;/a&gt;\n&lt;/p&gt;\n</code></pre>\n<p>Now, if you load the home page on your browser (http://localhost:8080/), you should see this:\n<img src=\"/content/images/2015/08/ractive-tutorial-07.png\" alt=\"\"></p>\n<p>You can follow the lower-left link to load the user page and use the upper-left (<em>Notetaker</em>) title link to get back to the home page.\n(_Remember to remove the lower-left link once you're done with your tests).</p>\n<hr>\n<p>You can check the source code in <a href=\"https://github.com/PaquitoSoft/notetaker-ractive\">this GitHub repo</a>.</p>\n<hr>\n<p>Previous post: <a href=\"/post/ractive-js-tutorial-creating-the-barebones\">Creating the barebones</a>\nNext post: <a href=\"/post/ractive-js-tutorial-loading-user-info\">Loading user info</a></p>\n<hr>\n"},{"slug":"ractive-js-tutorial-creating-the-barebones","title":"Ractive.js tutorial - Creating the barebones (2 of 6)","creationDate":"2015-07-28T20:35:02.558Z","keywords":"tutorial, javascript, ractive, ractivejs","status":"published","excerpt":"<p>(<em>Previous step</em>: <a href=\"/post/ractive-js-tutorial-setting-up-your-environment/\">Setting up your environment</a>)</p>\n<p>Ok, so now that you have all ready to fly, let's check what we want to do.</p>\n<p>The goal is to build a simple app that let us view <a href=\"https://github.com/\">GitHub</a> user's information and, also, to manage our own message notes for every user.\nWe will have a common layout with a static section (the one where you can search for users) and two subviews, having each one a different URL:</p>\n<ul>\n<li>Home page: will only contain a welcome message</li>\n<li>User profile page: will contain three sections for every user info group</li>\n</ul>\n","content":"<p>(<em>Previous step</em>: <a href=\"/post/ractive-js-tutorial-setting-up-your-environment/\">Setting up your environment</a>)</p>\n<p>Ok, so now that you have all ready to fly, let's check what we want to do.</p>\n<p>The goal is to build a simple app that let us view <a href=\"https://github.com/\">GitHub</a> user's information and, also, to manage our own message notes for every user.\nWe will have a common layout with a static section (the one where you can search for users) and two subviews, having each one a different URL:</p>\n<ul>\n<li>Home page: will only contain a welcome message</li>\n<li>User profile page: will contain three sections for every user info group</li>\n</ul>\n<p>This is the home page:\n<img src=\"/content/images/2015/08/ractive-tutorial-03.png\" alt=\"Home page\">\n&lt;br&gt;</p>\n<p>This is the user page:\n<img src=\"/content/images/2015/07/ractive-tutorial-04.png\" alt=\"User profile page\"></p>\n<p>Our main layout will host the header and a dynamic section we will fill with the subsections depending on the URL and the user actions.</p>\n<p>So, the first thing is to create our main <em>html</em> layout.\nOpen the <strong>index.html</strong> file and populate it with this content:</p>\n<pre><code class=\"language-html\">&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n\t&lt;head&gt;\n\t\t&lt;meta charset=&quot;UTF-8&quot;&gt;\n\t\t&lt;title&gt;Ractive Github notetaker&lt;/title&gt;\n\t\t&lt;link rel=&quot;stylesheet&quot; href=&quot;./node_modules/bootstrap/dist/css/bootstrap.css&quot;&gt;\n\t&lt;/head&gt;\n\n\t&lt;body&gt;\n\t\t&lt;div id=&quot;app&quot;&gt;&lt;/div&gt;\n\n\t\t&lt;script src=&quot;dist/js/app-bundle.js&quot;&gt;&lt;/script&gt;\n\t&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<p>This basic <em>html</em> just loads <a href=\"http://getbootstrap.com/\">bootstrap</a> for styling, creates an empty <em>div</em> where we will load our application content, and requests the <em>JS</em> bundle which will contains all of our magic code.</p>\n<p>The way Ractive works it that you create a new instance of its main object specifying the <em>html/handlebars</em> template it will need to deal with, the place in the document it will fills, and the data it must manage (and display). Of course, there are a lot of other properties you can initialize instances with, but keep this idea by now.</p>\n<p>Let's update our main <em>JS</em> file with a <em>Ractive</em> instance that will represent our application.\n<strong><em>root-folder</em>/app/js/app.js</strong>:</p>\n<pre><code class=\"language-language-javascript\">import Ractive from 'ractive';\n\nlet App = new Ractive({\n\t  el: '#app',\n  template: '&lt;input type=&quot;text&quot; value=&quot;{{name}}&quot;&gt;&lt;p&gt;Name: {{name}}&lt;/p&gt;',\n  data: {\n\t    name: 'Paquitosoft'\n  }\n});\n\nexport default App;\n</code></pre>\n<p>Before we go any further, we must install our first production dependency: <a href=\"http://www.ractivejs.org/\">Ractive.js</a></p>\n<pre><code class=\"language-language\">$ npm install ractive --save\n</code></pre>\n<p>Now, if you re/start your server (<em>npm start</em>), you will see a blank page with an input and a label with a text.\nNote how changing the value from the input, the text besides de label gets updated.\nThis is because <em>Ractive data binding</em>, implemented just by linking the value of the input to the <em>name</em> attribute of the Ractive instance <em>data</em>.</p>\n<p>If you've ever used <a href=\"https://github.com/janl/mustache.js\">Mustache</a> or <a href=\"http://handlebarsjs.com/\">Handlebars</a> before, <a href=\"http://docs.ractivejs.org/latest/templates\"><em>Ractive</em> template system</a> is very similar. It's an extension of <em>Mustache</em> with some sugar to make your life easier.</p>\n<p>Notice the <strong>template</strong> attribute we're passing in the Ractive instance initialization. It holds the contents of the template for the purpose of this little example, but we want to have that template in its own file for better organization.</p>\n<p>Let's create a new folder for holding our templates and create the main application one.\n<strong><em>root-folder</em>/app/js/views/app.html</strong></p>\n<pre><code class=\"language-html\">&lt;div class=&quot;main-container&quot;&gt;\n\t&lt;nav class=&quot;navbar navbar-default&quot; role=&quot;navigation&quot;&gt;\n\t\t&lt;div class=&quot;col-sm-1&quot;&gt;\n\t\t\t&lt;a href=&quot;/&quot;&gt;\n\t\t\t\t&lt;h3&gt;Notetaker&lt;/h3&gt;\n\t\t\t&lt;/a&gt;\n\t\t&lt;/div&gt;\n\t\t&lt;div class=&quot;col-sm-7 col-sm-offset-1&quot; style=&quot;margin-top: 15px;&quot;&gt;\n            Here will be the search controls...\n\t\t&lt;/div&gt;\n\t&lt;/nav&gt;\n\t&lt;div class=&quot;container&quot;&gt;\n        Here will be the main content of every route...\n\t&lt;/div&gt;\n&lt;/div&gt;\n</code></pre>\n<p>In order to use this file in our application main file, we need to import it. But, as by default <em>webpack</em> interprets all dependencies as <em>JS</em>, we need to configure it to understand our templates are only text and it doesn't need to process them.\nWe do this by configuring a new <em>webpack</em> loader which allows to simple import the files contents as they are (<a href=\"https://github.com/webpack/raw-loader\">raw-plugin</a>).\n<strong><em>root-folder</em>/webpack.config.js</strong></p>\n<pre><code class=\"language-language-javascript\">module.exports = {\n\t\tentry: './app/js/app.js',\n\toutput: {\n\t\t\tfilename: './dist/js/app-bundle.js'\n\t},\n\tmodule: {\n\t\t\tloaders: [\n\t\t\t\t{\n\t\t\t\t\ttest: /\\\\.js$/,\n\t\t\t\texclude: /(node_modules|bower_components)/,\n\t\t\t\tloader: 'babel'\n\t\t\t},\n\t\t\t{\n\t\t\t\t\ttest: /\\\\.html$/,\n\t\t\t\tloader: 'raw'\n\t\t\t}\n\t\t]\n\t}\n};\n</code></pre>\n<p>Now we import the template in the <em>app</em> file, re/start our main process (<em>npm start</em>) and check <a href=\"\">http://localhost:8080</a>.\n<strong><em>root-folder</em>/app/js/app.js</strong>:</p>\n<pre><code class=\"language-language-javascript\">import Ractive from 'ractive';\nimport template from './views/app.html';\n\nlet App = new Ractive({\n\t  el: '#app',\n  template: template,\n  data: {\n\t    name: 'Paquitosoft'\n  }\n});\n\nexport default App;\n</code></pre>\n<p>&lt;br&gt;</p>\n<h2>Ractive components</h2>\n<p>On top of direct instances, Ractive allows us to use what they call <a href=\"http://docs.ractivejs.org/latest/components\">Components</a>.\nThe idea behind this kind of objects is to allow you to create encapsulated components very much like <a href=\"http://facebook.github.io/react/\">React</a> does.\nOnce you declare and register them (can be globally or per instance/component), you can use it inside your templates as new <em>html</em> entities.</p>\n<p>To demonstrate how they work, we will create a new component to encapsulate the search functionality.\nWe begin by creating the template in a new file:\n<strong><em>root-folder</em>/app/views/search-user.html</strong></p>\n<pre><code class=\"language-html\">&lt;div class=&quot;col-sm-12&quot;&gt;\n\t&lt;form on-submit=&quot;searchUser&quot;&gt;\n\t\t&lt;div class=&quot;form-group col-sm-7&quot;&gt;\n\t\t\t&lt;input type=&quot;text&quot; class=&quot;form-control&quot; value=&quot;{{query}}&quot; autofocus placeholder=&quot;{{placeholder}}&quot;/&gt;\n\t\t&lt;/div&gt;\n\n\t\t&lt;div class=&quot;form-group col-sm-5&quot;&gt;\n\t\t\t&lt;button type=&quot;submit&quot; class=&quot;btn btn-block btn-primary&quot;&gt;Search Github&lt;/button&gt;\n\t\t&lt;/div&gt;\n\t&lt;/form&gt;\n&lt;/div&gt;\n</code></pre>\n<p>Let's comment this template a little bit...</p>\n<p>The <strong>on-submit</strong> attribute in the <em>form</em> tag is a <a href=\"http://docs.ractivejs.org/latest/events-overview\">Ractive proxy event</a> declaration. Every time the user submits the form, the component managing this template will be notified (we'll see how to listen to that event in a moment).</p>\n<p>The <em>input</em> tag has a data binding value with the <strong>query</strong> component data attribute. <em>Ractive</em> will keep the sync. The same goes for the <strong>placeholder</strong>.\nWhile the first one is only used inside the component, we will provide the latter from the parent <em>App</em> instance just to show how you can share data between them.</p>\n<p>You must know that <em>components</em>, by defuault, inherit its parent data context. This search component will be used from the App main instance, meaning that App's data attributes are, by default, visible to the <em>search</em> component.\nPersonally I don't like this kind of behavior by default as components get less reusable when they depend on some context not declared. I prefer to use them in <em>isolated</em> model, where they create an own data attributes context  which you can pass specific parameters.</p>\n<p>Let's create our component in a new file:\n<strong><em>root-folder</em>/app/js/components/layout/search-user.js</strong></p>\n<pre><code class=\"language-language-javascript\">import Ractive from 'ractive';\nimport Template from '../../../views/layout/search-user.html';\n\nvar SearchGithub = Ractive.extend({\n\t\tisolated: true,\n\ttemplate: Template,\n\n\toninit() {\n\t\t\tthis.on('searchUser', (rEvent) =&gt; {\n\t\t\t\trEvent.original.preventDefault();\n\n\t\t\tlet username = rEvent.context.query;\n\t\t\t\n\t\t\tconsole.log('This is the user you want to look up:', username);\n\t\t});\n\t},\n\n\tdata: {\n\t\t\tquery: ''\n\t}\n});\n\nexport default SearchGithub;\n</code></pre>\n<p>The way we create a <em>Ractive</em> component is by executing its <strong>extend</strong> function, passing the attributes which configure the component:</p>\n<ul>\n<li>isolated: We set this attribute to false so a new independent data context it's created for this component.</li>\n<li>temaplate: Set the template we previously declared.</li>\n<li>oninit: This function will be executed everytime the component gets initialized (Check <a href=\"http://docs.ractivejs.org/latest/lifecycle-events\">this link</a> to review the info of all life-cycle events).</li>\n<li>data: Here we define the inner properties.</li>\n</ul>\n<p>Also, in our <em>oninit</em> handler we set up a listener for the <strong>on-submit</strong> event by listening to the custom event <strong>searchUser</strong>.\nThe handler receives an extension of the native browser event enhanced with some useful information (check the <em>Event arguments</em> section of the <a href=\"http://docs.ractivejs.org/latest/proxy-events\">proxy events</a> docs to see the details).\nWe access the <em>original</em> property where we find the native browser event just to prevent default behavior. Note that you could also get this by returning <em>false</em> from this listener function, but that also stops event propagation.\nThe <strong>context</strong> attribute for the event holds a data reference to the context where the event took place. In this case is the <em>input</em> tag, represented by an object with its data bindings.</p>\n<p>So now that we have our component set up, let's use it from the App.\nFirst we need to update the App markup:\n<strong><em>root-folder</em>/app/views/app.html</strong></p>\n<pre><code class=\"language-html\">&lt;div class=&quot;main-container&quot;&gt;\n\t&lt;nav class=&quot;navbar navbar-default&quot; role=&quot;navigation&quot;&gt;\n\t\t&lt;div class=&quot;col-sm-1&quot;&gt;\n\t\t\t&lt;a href=&quot;/&quot;&gt;\n\t\t\t\t&lt;h3&gt;Notetaker&lt;/h3&gt;\n\t\t\t&lt;/a&gt;\n\t\t&lt;/div&gt;\n\t\t&lt;div class=&quot;col-sm-7 col-sm-offset-1&quot; style=&quot;margin-top: 15px;&quot;&gt;\n\t\t\t&lt;SearchUser placeholder=&quot;Type a GitHub username...&quot; /&gt;\n\t\t&lt;/div&gt;\n\t&lt;/nav&gt;\n\t&lt;div class=&quot;container&quot;&gt;\n\t\tHere will be the main content of every route...\n\t&lt;/div&gt;\n&lt;/div&gt;\n</code></pre>\n<p>Take note about how we're providing some data to the component by providing a tag attribute (<em>placeholder</em>).</p>\n<p>Second, we update our <em>App</em> instance to tell it to use the <em>search-user</em> component:\n<strong><em>root-folder</em>/app/js/app.js</strong></p>\n<pre><code class=\"language-language-javascript\">import Ractive from 'ractive';\nimport template from '../views/app.html';\nimport SearchUserComponent from './components/layout/search-user';\n\nlet App = new Ractive({\n\t  el: '#app',\n  template: template,\n  components: {\n\t  \tSearchUser: SearchUserComponent\n  }\n});\n\nexport default App;\n</code></pre>\n<p>We've just imported the <em>search-user</em> component and we set it as an <em>App</em> component using its <strong>components</strong> attributes. You just need to configure an object with the <em>components</em> you will use in your instance (or <em>component</em>) where the key is the name you will use for the <em>component</em> in the template and the value will be the <em>component class</em>.</p>\n<p>You can also register the components globally like this:</p>\n<pre><code class=\"language-language-javascript\">Ractive.components.SearchUser = SearchUserComponent\n</code></pre>\n<p>The benefit is that all Ractive instances and <em>components</em> will <em>see</em> the component.\nThe downside is that you loose visibility about which components your instance/component is using in the code.\nThis is just a personal choice, and I prefer being specific.</p>\n<p>Ok, if you reload you browser now, you must see this picture:\n<img src=\"/content/images/2015/07/ractive-tutorial-05.png\" alt=\"\"></p>\n<p>The last step on this post is to also create a component for the main dynamic section representing the home page.\nWe will do this for the sake of modularity and to get ready for the next post about routing.\nThe template is very simple:\n<strong><em>root-folder</em>/app/views/home-page.html</strong></p>\n<pre><code class=\"language-html\">&lt;h2 class=&quot;text-center&quot;&gt;\n\tSearch by Github username above\n&lt;/h2&gt;\n</code></pre>\n<p>The component is also trivial:\n<strong><em>root-folder</em>/app/js/components/home-page.js</strong></p>\n<pre><code class=\"language-language-javascript\">import Ractive from 'ractive';\nimport Template from '../../views/home-page.html';\n\nvar HomePage = Ractive.extend({\n\t\ttemplate: Template\n});\n\nexport default HomePage;\n</code></pre>\n<p>Now update App to use this new component:\n<strong><em>root-folder</em>/app/views/app.html</strong></p>\n<pre><code class=\"language-html\">&lt;div class=&quot;main-container&quot;&gt;\n\t&lt;nav class=&quot;navbar navbar-default&quot; role=&quot;navigation&quot;&gt;\n\t\t&lt;div class=&quot;col-sm-1&quot;&gt;\n\t\t\t&lt;a href=&quot;/&quot;&gt;\n\t\t\t\t&lt;h3&gt;Notetaker&lt;/h3&gt;\n\t\t\t&lt;/a&gt;\n\t\t&lt;/div&gt;\n\t\t&lt;div class=&quot;col-sm-7 col-sm-offset-1&quot; style=&quot;margin-top: 15px;&quot;&gt;\n\t\t\t&lt;SearchUser placeholder=&quot;Type a GitHub username...&quot; /&gt;\n\t\t&lt;/div&gt;\n\t&lt;/nav&gt;\n\t&lt;div class=&quot;container&quot;&gt;\n\t\t&lt;HomePage /&gt;\n\t&lt;/div&gt;\n&lt;/div&gt;\n</code></pre>\n<p><strong><em>root-folder</em>/app/js/app.js</strong></p>\n<pre><code class=\"language-language-javascript\">import Ractive from 'ractive';\nimport template from '../views/app.html';\nimport SearchUserComponent from './components/layout/search-user';\nimport HomePageComponent from './components/home-page';\n\nlet App = new Ractive({\n\t  el: '#app',\n  template: template,\n  components: {\n\t  \tSearchUser: SearchUserComponent,\n  \tHomePage: HomePageComponent\n  }\n});\n\nexport default App;\n</code></pre>\n<h2>Summary</h2>\n<ul>\n<li>We now know what we want to build.</li>\n<li>We created the main App instance using <em>Ractive</em>.</li>\n<li>We configured <a href=\"http://webpack.github.io/\">webpack</a> to make it load our <em>html</em> templates.</li>\n<li>We got some insights about this library and how it works: what components are, how to configure data bindings, how to listen to DOM events and how to handle data contexts.</li>\n<li>We divided our little application in pieces both in terms of presentation (views) and behavior (components).</li>\n</ul>\n<hr>\n<p>You can check the source code in <a href=\"https://github.com/PaquitoSoft/notetaker-ractive\">this GitHub repo</a>.</p>\n<hr>\n<p>Previous post: <a href=\"/post/ractive-js-tutorial-setting-up-your-environment\">Setting up your environment</a>\nNext post: <a href=\"/post/ractive-js-tutorial-routing\">Routing</a></p>\n<hr>\n"},{"slug":"ractive-js-tutorial-setting-up-your-environment","title":"Ractive.js tutorial - Setting up your environment (1 of 6)","creationDate":"2015-07-26T20:08:29.713Z","keywords":"tutorial, javascript, ractive, ractivejs","status":"published","excerpt":"<p>(<em>Previous step: <a href=\"/post/create-a-ractive-application-tutorial\">Tutorial introduction</a></em>)</p>\n<p>I'm glad you decided to get here and I hope I can get your attention all the way down to the end of this tutorial.</p>\n<p>So, the first step is to set up your working environment with the tools you will use.\nI assume you have <a href=\"https://nodejs.org/download/\">NodeJS</a> and NPM installed in your system. If not, please, follow the previous link and come back once you're ready.</p>\n<p>Now, you need to create a new empty folder and initialize your project with <em>npm</em>:</p>\n<pre><code class=\"language-language\">$ mkdir notetaker-ractive\n$ cd notetaker-ractive\n$ npm init\n</code></pre>\n<p><em>NPM</em> will ask you some questions. You don't need to type anything and just press <em>Enter</em> for every question.\nThis command has created a new file (<em>package.json</em>) in your folder.\nNow we need to install the basic packages:</p>\n<ul>\n<li><a href=\"http://webpack.github.io/\">Webpack</a>: will help us to bundle all our JS code and to use <em>ES2015</em> import system.</li>\n<li><a href=\"https://babeljs.io/\">Babel</a>: will help us to use new <em>ES2015</em> features by transpiling them to <em>ES5</em> compatible code.</li>\n<li><a href=\"https://github.com/cloudhead/node-static\">node-static</a>: will serve our files (static server)</li>\n</ul>\n<p>You can use this command:</p>\n<pre><code>$ npm i webpack babel-core babel-loader node-static --save-dev\n</code></pre>\n<p><strong>UPDATE (24-02-2016)</strong>:\n<em>The new version of Babel (v6) requires an extra dependency to be installed and configured. Please, if you're following this tutorial for the first time, also install <strong>babel-preset-es2015</strong> dependency</em>.</p>\n","content":"<p>(<em>Previous step: <a href=\"/post/create-a-ractive-application-tutorial\">Tutorial introduction</a></em>)</p>\n<p>I'm glad you decided to get here and I hope I can get your attention all the way down to the end of this tutorial.</p>\n<p>So, the first step is to set up your working environment with the tools you will use.\nI assume you have <a href=\"https://nodejs.org/download/\">NodeJS</a> and NPM installed in your system. If not, please, follow the previous link and come back once you're ready.</p>\n<p>Now, you need to create a new empty folder and initialize your project with <em>npm</em>:</p>\n<pre><code class=\"language-language\">$ mkdir notetaker-ractive\n$ cd notetaker-ractive\n$ npm init\n</code></pre>\n<p><em>NPM</em> will ask you some questions. You don't need to type anything and just press <em>Enter</em> for every question.\nThis command has created a new file (<em>package.json</em>) in your folder.\nNow we need to install the basic packages:</p>\n<ul>\n<li><a href=\"http://webpack.github.io/\">Webpack</a>: will help us to bundle all our JS code and to use <em>ES2015</em> import system.</li>\n<li><a href=\"https://babeljs.io/\">Babel</a>: will help us to use new <em>ES2015</em> features by transpiling them to <em>ES5</em> compatible code.</li>\n<li><a href=\"https://github.com/cloudhead/node-static\">node-static</a>: will serve our files (static server)</li>\n</ul>\n<p>You can use this command:</p>\n<pre><code>$ npm i webpack babel-core babel-loader node-static --save-dev\n</code></pre>\n<p><strong>UPDATE (24-02-2016)</strong>:\n<em>The new version of Babel (v6) requires an extra dependency to be installed and configured. Please, if you're following this tutorial for the first time, also install <strong>babel-preset-es2015</strong> dependency</em>.</p>\n<p>Let's start coding by creating our main <em>html</em> file.\n<strong><em>root-folder</em>/index.html</strong></p>\n<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n\t&lt;head&gt;\n\t\t&lt;meta charset=&quot;UTF-8&quot;&gt;\n\t\t&lt;title&gt;Ractive Github notetaker&lt;/title&gt;\n        &lt;link rel=&quot;stylesheet&quot; href=&quot;./node_modules/bootstrap/dist/css/bootstrap.css&quot;&gt;\t&lt;/head&gt;\n\t&lt;body&gt;\n&lt;div class=&quot;container&quot;&gt;\n\t\t\t&lt;div class=&quot;starter-template&quot;&gt;\n\t\t\t\t&lt;h1&gt;Bootstrap starter template&lt;/h1&gt;\n\t\t\t\t&lt;p class=&quot;lead&quot;&gt;Use this document as a way to quickly start any new project.&lt;br&gt; All you get is this text and a mostly barebones HTML document.&lt;/p&gt;\n\t\t\t&lt;/div&gt;\n\t\t&lt;/div&gt;\n\t&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<p>In order to easily start a local server, we need to update our <strong>package.json</strong> file. Look for the <em>scripts</em> attribute and replace the <em>test</em> property with a <em>start</em> one.\n<strong><em>root-folder</em>/package.json</strong></p>\n<pre><code class=\"language-javascript\">{\n  &quot;name&quot;: &quot;notetaker-ractive&quot;,\n  &quot;version&quot;: &quot;1.0&quot;,\n  &quot;description&quot;: &quot;&quot;,\n  &quot;main&quot;: &quot;index.js&quot;,\n  &quot;author&quot;: &quot;Your name&quot;,\n  &quot;scripts&quot;: {\n\t    &quot;start&quot;: &quot;node node_modules/node-static/bin/cli.js&quot;\n  },\n  &quot;author&quot;: &quot;Your name&quot;,\n  &quot;license&quot;: &quot;ISC&quot;,\n  &quot;devDependencies&quot;: {\n\t    &quot;babel-core&quot;: &quot;^5.8.9&quot;,\n    &quot;babel-loader&quot;: &quot;^5.3.2&quot;,\n    &quot;bootstrap&quot;: &quot;^3.3.5&quot;,\n    &quot;node-static&quot;: &quot;^0.7.7&quot;,\n    &quot;webpack&quot;: &quot;^1.10.5&quot;\n  }\n}\n</code></pre>\n<p>Now you only need to run this command from the root folder of your project everytime you want to start the server:</p>\n<pre><code>$ npm start\n</code></pre>\n<p>If you load this URL (http://localhost:8080/) in your browser, you should see the basic <em>html</em> we've created.</p>\n<p><img src=\"/content/images/2015/07/ractive-tutorial-01.png\" alt=\"Skeleton webpage\"></p>\n<p>The next step is to configure <em>webpack</em> with the ability to <em>compile</em> modern JS code.</p>\n<p>We need to create a new <em>webpack</em> configuration file and populate it with these contents: <strong><em>root-folder</em>/webpack.config.js</strong></p>\n<pre><code class=\"language-javascript\">module.exports = {\n\t\tentry: './app/js/app.js',\n\toutput: {\n\t\t\tfilename: './dist/js/app-bundle.js'\n\t},\n\tmodule: {\n\t\t\tloaders: [\n\t\t\t\t{\n\t\t\t\t\ttest: /\\\\.js$/,\n\t\t\t\texclude: /(node_modules|bower_components)/,\n\t\t\t\tloader: 'babel',\n                // If you're following the tutorial for the first time, \n                // you will be using Babel v6 and thus you need to add this extra configuration\n                query: {\n\t                    presets: ['es2015']\n                }\n\t\t\t}\n\t\t]\n\t}\n};\n</code></pre>\n<p>We're telling <em>webpack</em> that our main JS file is <strong>./app/js/app.js</strong>, that it should create only one bundle file with its contents (and all its dependencies) in <strong>./dist/js/app-bundle.js</strong> and that it should filter all files with a javascript extension (<strong>.js</strong>) with <em>babel</em> loader, which will interpret <em>ES2015</em> code and convert it to <em>ES5</em> compatible.</p>\n<p>Now let's create a basic <em>app.js</em> file to test everything is working.\n<strong><em>root-folder</em>/app/js/app.js</strong></p>\n<pre><code class=\"language-javascript\">class Foo {\n\t\tconstructor(name) {\n\t\t\tthis.name = name;\n\t}\n\n\tsayHi() {\n\t\t\talert(`Hi ${this.name}!!!`);\n\t}\n}\n\nlet bar = new Foo('Paquitosoft');\n\nbar.sayHi();\n</code></pre>\n<p>Just a simple code to demonstrate that <em>ES2015</em> code is compiled by babel to produce <em>ES5</em> compatible code.</p>\n<p>Update the <strong>index.html</strong> file to load the bundle JS at the end of the <em>body</em> tag:</p>\n<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n\t&lt;head&gt;\n\t\t&lt;meta charset=&quot;UTF-8&quot;&gt;\n\t\t&lt;title&gt;Ractive Github notetaker&lt;/title&gt;\n        &lt;link rel=&quot;stylesheet&quot; href=&quot;./node_modules/bootstrap/dist/css/bootstrap.css&quot;&gt;\t&lt;/head&gt;\n\t&lt;body&gt;\n&lt;div class=&quot;container&quot;&gt;\n\t\t\t&lt;div class=&quot;starter-template&quot;&gt;\n\t\t\t\t&lt;h1&gt;Bootstrap starter template&lt;/h1&gt;\n\t\t\t\t&lt;p class=&quot;lead&quot;&gt;Use this document as a way to quickly start any new project.&lt;br&gt; All you get is this text and a mostly barebones HTML document.&lt;/p&gt;\n\t\t\t&lt;/div&gt;\n\t\t&lt;/div&gt;\n\n        &lt;script src=&quot;dist/js/app-bundle.js&quot;&gt;&lt;/script&gt;\n\t&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<p>The last step is to update our <em>npm start script</em> to also use <em>webpack</em> in monitoring mode so, everytime you update a file, it updates the generated bundle.\n<strong><em>root-folder</em>/package.json</strong></p>\n<pre><code class=\"language-javascript\">{\n  &quot;name&quot;: &quot;notetaker-ractive&quot;,\n  &quot;version&quot;: &quot;1.0&quot;,\n  &quot;description&quot;: &quot;&quot;,\n  &quot;main&quot;: &quot;index.js&quot;,\n  &quot;author&quot;: &quot;Your name&quot;,\n  &quot;scripts&quot;: {\n\t    &quot;start&quot;: &quot;webpack -w &amp; node_modules/node-static/bin/cli.js&quot;\n  },\n  &quot;author&quot;: &quot;Your name&quot;,\n  &quot;license&quot;: &quot;ISC&quot;,\n  &quot;devDependencies&quot;: {\n\t    &quot;babel-core&quot;: &quot;^5.8.9&quot;,\n    &quot;babel-loader&quot;: &quot;^5.3.2&quot;,\n    &quot;bootstrap&quot;: &quot;^3.3.5&quot;,\n    &quot;node-static&quot;: &quot;^0.7.7&quot;,\n    &quot;webpack&quot;: &quot;^1.10.5&quot;\n  }\n}\n</code></pre>\n<p>Now, restart your local server (<em>Ctrl + C</em> and <em>npm start</em>) and you should see something like this in your terminal:</p>\n<pre><code>$ npm start\n\n&gt; notetaker-ractive@1.0.0 start /Users/telemaco/Desarrollo/Node/Librerias/notetaker-ractive\n&gt; webpack -w &amp; node_modules/node-static/bin/cli.js\n\nserving &quot;.&quot; at http://127.0.0.1:8080\nHash: 5fd031eb3af6c5d592e1\nVersion: webpack 1.10.5\nTime: 748ms\n                  Asset     Size  Chunks             Chunk Names\n./dist/js/app-bundle.js  2.43 kB       0  [emitted]  main\n    + 1 hidden modules\n</code></pre>\n<p>Reload your browser to check that everything is ok.\nThis is what you should see:\n<img src=\"/content/images/2015/07/ractive-tutorial-02.png\" alt=\"\"></p>\n<p><strong>Great!</strong> you now have all you need to get into the interesting part of the tutorial.</p>\n<hr>\n<p>You can check the source code in <a href=\"https://github.com/PaquitoSoft/notetaker-ractive\">this GitHub repo</a>.</p>\n<hr>\n<p>Previous step: <a href=\"/post/create-a-ractive-application-tutorial\">Introduction</a>\nNext step: <a href=\"/post/ractive-js-tutorial-creating-the-barebones\">Creating the barebones</a></p>\n<hr>\n"},{"slug":"create-a-ractive-application-tutorial","title":"Create a Ractive.js application (0 of 6)","creationDate":"2015-07-26T16:15:37.214Z","keywords":"tutorial, javascript, ractive, ractivejs","status":"published","excerpt":"<p>I'm a big fan of javascript. I like it in the front-end and I love it in the back-end (thanks <a href=\"http://www.quora.com/Who-is-Ryan-Dahl\">Ryan Dhal</a>).\nAlso I enjoy playing with new libraries and frameworks that pops up every day. It seems nowadays everybody creates a new one and, when the time comes for you to start a new project and select the right one, oh man! it's a tough time.</p>\n<p>With the beggining of this year, I was in the position of starting a new big project and I spent some time deciding which libraries we would use in the front-end (no doubts on our back-end: <strong>NodeJS</strong> <em>FTW</em>).\nIt was then when I discovered <a href=\"http://www.ractivejs.org/\">Ractive.JS</a>.</p>\n<p>The more time I spent reading the <a href=\"http://docs.ractivejs.org/latest/get-started\">docs</a> and playing with their interactive <a href=\"http://learn.ractivejs.org/hello-world/1/\">demos</a>, the more surprised I was I didn't hear anything about this library before.\nIMHO it's a very easy to learn and powerful tool for dealing with DOM automatic bindings, event handling, pub/sub stuff and so on.</p>\n<p>I began working in a prototype of our project using this tool and I was also surprised about the speed yur can get in terms of development.\nThe way this library solves some common problems is very natural for me, it fits my mindset. And every time I needed to learn how to implement something, it was pretty straightforward to find out.</p>\n","content":"<p>I'm a big fan of javascript. I like it in the front-end and I love it in the back-end (thanks <a href=\"http://www.quora.com/Who-is-Ryan-Dahl\">Ryan Dhal</a>).\nAlso I enjoy playing with new libraries and frameworks that pops up every day. It seems nowadays everybody creates a new one and, when the time comes for you to start a new project and select the right one, oh man! it's a tough time.</p>\n<p>With the beggining of this year, I was in the position of starting a new big project and I spent some time deciding which libraries we would use in the front-end (no doubts on our back-end: <strong>NodeJS</strong> <em>FTW</em>).\nIt was then when I discovered <a href=\"http://www.ractivejs.org/\">Ractive.JS</a>.</p>\n<p>The more time I spent reading the <a href=\"http://docs.ractivejs.org/latest/get-started\">docs</a> and playing with their interactive <a href=\"http://learn.ractivejs.org/hello-world/1/\">demos</a>, the more surprised I was I didn't hear anything about this library before.\nIMHO it's a very easy to learn and powerful tool for dealing with DOM automatic bindings, event handling, pub/sub stuff and so on.</p>\n<p>I began working in a prototype of our project using this tool and I was also surprised about the speed yur can get in terms of development.\nThe way this library solves some common problems is very natural for me, it fits my mindset. And every time I needed to learn how to implement something, it was pretty straightforward to find out.</p>\n<p>We finally didn't use <em>Ractive.JS</em> in our project as we found some issues regarding server-side <em>html</em> rendering we couldn't solve (<a href=\"https://github.com/ractivejs/ractive/issues/1648\">more  info</a>) and I can tell you it was a hard decision to drop it.</p>\n<p>Anyway, I'm a big fan of this library and I'm eager to use it in my side projects (couldn't begin any new one this year so far).</p>\n<p>On the other hand, I spend the little spare time I have these days following the great tutorials you can find in <a href=\"https://www.egghead.io\">egghead.io</a>. Specially, I enjoyed the <a href=\"http://facebook.github.io/react/\">ReactJS</a> ones.\nThis library has a lot of popularity nowadays and I wanted to know why.\nFrom my point of view, <em>ReacjJS</em> is also a great library and if you combine it with the <a href=\"https://facebook.github.io/flux/docs/overview.html\">Flux</a> architecture, it's also a powerful tool for you to build complex systems.\nBut, the more I know about <em>ReactJS</em> the more I wonder why <em>Ractive.JS</em> is not as popular. Of course the latter (built by the bright people at <em>The Guardian</em>) does not have <em>Facebook</em> behind, but from the developer perspective, I think it's at as good as the other one.</p>\n<p>So, when I finished the great <a href=\"https://github.com/tylermcginnis/\">Tyler McGinnis</a> tutorial on <a href=\"https://egghead.io/series/build-your-first-react-js-application\">how to build an app with <em>ReactJS</em></a>, I was convinced to do the same with <strong>Ractive.JS</strong>.</p>\n<h2>Tutorial introduction</h2>\n<p>The goal of this tutorial is to introuduce you to the world of <em>Ractive.JS</em>. Also, as I've been reading a lot about <em>ES2015</em> (formerly <em>ES6</em>), I will be using the next version of <em>Javascript</em> thanks to another brilliant tool: the <a href=\"https://babeljs.io/\">Babel</a> transpiler.\nThe last tools I will be using is <a href=\"http://webpack.github.io/\">webpack</a> to build all of our front-end assets and <a href=\"https://www.npmjs.com/\">npm</a> for dependency management.\nI will also be using a couple of extra libraries apart from <em>React.JS</em> I will explain when the time comes.</p>\n<p>You can find the final code for this tutorial at <a href=\"https://github.com/PaquitoSoft/notetaker-ractive\">GitHub</a>.</p>\n<h2>Summary</h2>\n<p>These are the links for the different steps of the tutorial:</p>\n<ol>\n<li><a href=\"/post/ractive-js-tutorial-setting-up-your-environment\">Setting up your environmet</a></li>\n<li><a href=\"/post/ractive-js-tutorial-creating-the-barebones\">Creating the barebones</a></li>\n<li><a href=\"/post/ractive-js-tutorial-routing\">Routing</a></li>\n<li><a href=\"/post/ractive-js-tutorial-loading-user-info\">Loading user info (GitHub)</a></li>\n<li><a href=\"/post/ractive-js-tutorial-managing-users-notes\">Managing user's notes (Firebase)</a></li>\n<li><a href=\"/post/ractive-js-tutorial-the-final-touch\">The final touch</a></li>\n</ol>\n"},{"slug":"consuming-ga-data-from-nodejs-express-app","title":"Consuming GA data from NodeJS Express app","creationDate":"2013-12-01T21:43:41.405Z","keywords":"nodejs, express, google, analytics, ga, development","status":"published","excerpt":"<p>I didn't have a great time trying to implement a <em>simple</em> feature involving Google Analytics in one of my projects (nodejs web application).</p>\n<p>My humble requirement was to collect some data (events) I was pushing to Google Analytics in order to create a simple report for my users.\nSince it isn't a critical report, my idea was to get the data once a day and cache it.</p>\n<p>So, as simple as it seems, it has been a tough trip for me and I want to share the whole process with the community. I hope anyone trying to achive something similar gets to this article and find it helpful.</p>\n<p>These are the main steps I had to take:</p>\n<ul>\n<li>Register an application in <a href=\"https://code.google.com/apis/console\">Google API console center</a></li>\n<li>Create a service account</li>\n<li>Register the newly created service account generated email into the Google Analytics account I wanted to consume</li>\n<li>Implement the authorization token request (create a <em>JWT</em>)</li>\n<li>Implement the request to collect data from Google Analytics</li>\n</ul>\n","content":"<p>I didn't have a great time trying to implement a <em>simple</em> feature involving Google Analytics in one of my projects (nodejs web application).</p>\n<p>My humble requirement was to collect some data (events) I was pushing to Google Analytics in order to create a simple report for my users.\nSince it isn't a critical report, my idea was to get the data once a day and cache it.</p>\n<p>So, as simple as it seems, it has been a tough trip for me and I want to share the whole process with the community. I hope anyone trying to achive something similar gets to this article and find it helpful.</p>\n<p>These are the main steps I had to take:</p>\n<ul>\n<li>Register an application in <a href=\"https://code.google.com/apis/console\">Google API console center</a></li>\n<li>Create a service account</li>\n<li>Register the newly created service account generated email into the Google Analytics account I wanted to consume</li>\n<li>Implement the authorization token request (create a <em>JWT</em>)</li>\n<li>Implement the request to collect data from Google Analytics</li>\n</ul>\n<h2>Registering an application in Google API console center</h2>\n<p>First of all you need to sign in into <a href=\"https://code.google.com/apis/console\">Google API console center</a> and register a new project. Once you create it (you just need to fill the project name), you should select the <em>Services</em> link in the left vertical menu. Here you can set what Google services your project will need access to. So we click on the <em>Analytics API</em> switch button to activate this permission.</p>\n<p><img src=\"https://lh3.googleusercontent.com/-H2ECcOC-KTk/UN-DZCZzGSI/AAAAAAAAABY/zY0RlFoWPcI/s912/register_google_api_console.jpg\" alt=\"Register a new application in Google API console\"></p>\n<h2>Create a service account</h2>\n<p>Next we need to create the service account.<br>\nIn the left vertical menu you should click in the <em>API Access</em> link. You should see a big blue button saying <em>Create an OAuth Client ID...</em>.</p>\n<p><img src=\"https://lh6.googleusercontent.com/-g7qvSvt3DPQ/UOasmIB_xzI/AAAAAAAAABo/e400jAuaMtA/s912/create_service_account_1.jpg\" alt=\"Create service account (step 1)\"></p>\n<p>Click there and you will be presented a popup to fill some info about the app that will be using the Google service. Fill the project name at least.</p>\n<p><img src=\"https://lh4.googleusercontent.com/-E_3Cq9o3cBk/UOasm4j6JRI/AAAAAAAAABw/-TZqTHHQTY8/s912/create_service_account_2.jpg\" alt=\"Create service account (step 2)\"></p>\n<p>Now you will get to a second step (inside the popup) where you need to choose you want to create a <em>service account</em>.</p>\n<p><img src=\"https://lh4.googleusercontent.com/-Or_U6ntuM7M/UOasoEXN0mI/AAAAAAAAAB0/aD_fJs5IQOI/s912/create_service_account_3.jpg\" alt=\"Create service account (step 3)\"></p>\n<p>After you click in <em>Create client ID</em> button, the popup will show a message stating that public-private key pair has been generated. You will get a password and your private key (the password is for working with the private key).<br>\nSave the private key file ('.p12' file type) into your hard drive.</p>\n<p><img src=\"https://lh5.googleusercontent.com/-y5XEIRMWwwk/UOaspLNWc6I/AAAAAAAAAB8/zN0mMwz8-fU/s912/create_service_account_4.jpg\" alt=\"Create service account (step 4)\"></p>\n<p>When you close the popup you will see a new section in the main page (<em>Service account</em>). You need to take not about the <em>Email address</em> generated for the service account.</p>\n<p><img src=\"https://lh5.googleusercontent.com/-bfkyPN8zCCU/UOasp-zLG3I/AAAAAAAAACE/NPFq01WJA0k/s912/create_service_account_5.jpg\" alt=\"Create service account (step 5)\"></p>\n<p>There's one important last step you need to take here. Google has given you a private key in a '.p12' file, but you will need a <em>.pem</em> file in order to sign your JWT.<br>\nIn order to achieve this step you need to have <em>openssl</em> tool installed in your system.<br>\nOpen a terminal and browse to the folder where you saved the private key. Then type this command:</p>\n<pre><code>my_computer$ openssl pkcs12 -in YOUR_PRIVATE_KEY_FILE.p12 -out demo_certificate.pem -nodes\n</code></pre>\n<p>After that, you will have a new file in your folder called <em>certificate.pem</em>. This is the one we will use later on.</p>\n<h2>Register service account in Google Analytics</h2>\n<p>In this step you need to grant read access to the brand new service account in your Google analytics project.<br>\nLog in to <a href=\"http://www.google.com/analytics/\">Google Analytics</a> and navigate to your project. Enter de <em>Admin</em> section and look for the <em>Users</em> tab.</p>\n<p><img src=\"https://lh4.googleusercontent.com/-mFT-z5XXZag/UOasq46iNEI/AAAAAAAAACM/lMfqqxqfFYg/s912/grant_service_account_access_to_ga_1.jpg\" alt=\"Grant access to service account in Google Analytics (step 1)\"></p>\n<p>Click in the <em>New User</em> button and type the email for the service account you previously created. Use the <em>User</em> role.<br>\nIn the <em>profile</em> section, select your Analytics project profile and add it to <em>Selected profiles</em> panel.<br>\nFinally, push <em>Create user button</em>.</p>\n<p><img src=\"https://lh4.googleusercontent.com/-zhgwYXNEFNc/UOasr9ayMZI/AAAAAAAAACU/Wyl7U__pXkA/s912/grant_service_account_access_to_ga_2.jpg\" alt=\"Grant access to service account in Google Analytics (step 2)\"></p>\n<p>That's it!</p>\n<h2>Implement authorization request</h2>\n<p>In order to access <em>Analytics</em> data, we need to get an authorization token first. We will use the email of the brand new service account created and also the private key (<em>.pem</em> file) to generate a <em>JWT</em> (JSON Web Token). We will send a <em>POST</em> request to Google with this JWT so they answer with an access token.</p>\n<p>Here is my version of the code implementing JWT generation and request:</p>\n<pre><code class=\"language-javascript\">var fs = require('fs'),\n    crypto = require('crypto'),\n\trequest = require('request'); // This is an external module (https://github.com/mikeal/request)\n\t\nvar authHeader = {\n\t\t\t'alg': 'RS256',\n\t\t'typ': 'JWT'\n\t},\n\tauthClaimSet = {\n\t\t\t'iss': process.env.GA_SERVICE_ACCOUNT, // Service account email\n\t\t'scope': 'https://www.googleapis.com/auth/analytics.readonly', // We MUST tell them we just want to read data\n\t\t'aud': 'https://accounts.google.com/o/oauth2/token'\n\t},\n\tSIGNATURE_ALGORITHM = 'RSA-SHA256',\n\tSIGNATURE_ENCODE_METHOD = 'base64',\n\tGA_KEY_PATH = 'PATH_TO_YOUR_PRIVATE_KEY.pem',\n\tgaKey;\n\nfunction urlEscape(source) {\n\t\treturn source.replace(/\\\\+/g, '-').replace(/\\\\//g, '_').replace(/\\\\=+$/, '');\n}\n\nfunction base64Encode(obj) {\n\t\tvar encoded = new Buffer(JSON.stringify(obj), 'utf8').toString('base64');\n\treturn urlEscape(encoded);\n}\n\nfunction readPrivateKey() {\n\t\tif (!gaKey) {\n\t\t\tgaKey = fs.readFileSync(GA_KEY_PATH, 'utf8');\n\t}\n\treturn gaKey;\n}\n\nvar authorize = function(callback) {\n\t\n\tvar self = this,\n\t\tnow = parseInt(Date.now() / 1000, 10), // Google wants us to use seconds\n\t\tcipher,\n\t\tsignatureInput,\n\t\tsignatureKey = readPrivateKey(),\n\t\tsignature,\n\t\tjwt;\n\n\t// Setup time values\n\tauthClaimSet.iat = now;\n\tauthClaimSet.exp = now + 60; // Token valid for one minute\n\n\t// Setup JWT source\n\tsignatureInput = base64Encode(authHeader) + '.' + base64Encode(authClaimSet);\n\n\t// Generate JWT\n\tcipher = crypto.createSign('RSA-SHA256');\n\tcipher.update(signatureInput);\n\tsignature = cipher.sign(signatureKey, 'base64');\n\tjwt = signatureInput + '.' + urlEscape(signature);\n\t\n\t// Send request to authorize this application\n\trequest({\n\t\t\tmethod: 'POST',\n\t\theaders: {\n\t\t\t\t'Content-Type': 'application/x-www-form-urlencoded'\n\t\t},\n\t\turi: 'https://accounts.google.com/o/oauth2/token',\n\t\tbody: 'grant_type=' + escape('urn:ietf:params:oauth:grant-type:jwt-bearer') +\n\t\t\t'&amp;assertion=' + jwt\n\t}, function(error, response, body) {\n\t\t\tif (error) {\n\t\t\t\tconsole.log(error);\n\t\t\tcallback(new Error(error));\n\t\t} else {\n\t\t\t\tvar gaResult = JSON.parse(body);\n\t\t\tif (gaResult.error) {\n\t\t\t\t\tcallback(new Error(gaResult.error));\n\t\t\t} else {\n\t\t\t\t\tcallback(null, gaResult.access_token);\n\t\t\t}\n\t\t}\n\t});\n\n};\n</code></pre>\n<p>The auth request must have two parameters:</p>\n<ul>\n<li>grant_type: This is a constant</li>\n<li>assertion: Generated JWT</li>\n</ul>\n<p>As you can see, JWT is created with three parts:</p>\n<ul>\n<li>a fixed header</li>\n<li>a claim set: info about what are what do we need the access token for</li>\n<li>a signature (generated based on the other two)</li>\n</ul>\n<p>The <em>scope</em> property of the <em>claim set</em> must be set to <em>readonly</em>. At least, I couldn't get it work without it, even if I set the service account with an administrator role in my <em>Analytics</em> project settings.</p>\n<p>The response from <em>Google</em> should be something like this:</p>\n<pre><code class=\"language-javascript\">{\n\t&quot;access_token&quot; : &quot;1/8xbJqaOZXSUZbHLl5EOtu1pxz3fmmetKx9W8CV4t79M&quot;,\n\t&quot;token_type&quot;: &quot;Bearer&quot;,\n\t&quot;expires_in&quot;: 3600\n}\n</code></pre>\n<h2>Implement analytics data request</h2>\n<p>The hard part is already done, this is the easy one.<br>\nNow we only need to make a request to <em>Google Analytics</em> service using our auth token.</p>\n<pre><code class=\"language-javascript\">var request = require('request'),\n\tqs = require('querystring');\n\t\nauthorize(function(err, token) {\n\tif (!err) {\n\t\t// Query the number of total visits for a month\n\t\tvar requestConfig = {\n\t\t\t\t'ids': 'ga:YOUR_ANALYTICS_PROJECT_PROFILE_ID',\n\t\t\t'start-date': '2012-12-01',\n\t\t\t'end-date': '2012-12-21',\n\t\t\t'dimensions': 'ga:visitors'\n\t\t\t'max-results': '10'\n\t\t};\n\t\t\n\t\trequest({\n\t\t\t\tmethod: 'GET',\n\t\t\theaders: {\n\t\t\t\t\t'Authorization': 'Bearer ' + token // Here is where we use the auth token\n\t\t\t},\n\t\t\turi: 'https://www.googleapis.com/analytics/v3/data/ga?' + qs.stringify(requestConfig)\n\t\t}, function(error, resp, body) {\n\t\t\t\tvar data = JSON.parse(body);\n\t\t\tconsole.log(data);\n\t\t});\n\t}\n});\n</code></pre>\n<h2>References:</h2>\n<ul>\n<li><a href=\"https://developers.google.com/accounts/docs/OAuth2ServiceAccount\">Using OAuth 2.0 for Server to Server Applications</a></li>\n<li><a href=\"https://developers.google.com/analytics/devguides/reporting/core/v3/reference\">Google Analytics Core Reporting API - Reference Guide</a></li>\n<li><a href=\"http://ga-dev-tools.appspot.com/explorer/\">Google Analytics Query Explorer 2</a></li>\n<li><a href=\"https://github.com/berngp/node-green-jwt\">node-green-jwt</a></li>\n<li><a href=\"https://github.com/ncb000gt/node-googleanalytics\">node-googleanalytics</a></li>\n<li><a href=\"http://stackoverflow.com/questions/9863509/service-applications-and-google-analytics-api-v3-server-to-server-oauth2-authen\">Stack Overflow 1</a></li>\n<li><a href=\"http://stackoverflow.com/questions/11529595/is-a-service-account-the-right-credentials-for-querying-google-bigquery-in-node\">Stack Overflow 2</a></li>\n</ul>\n"}],"_superjson":{"values":{"posts.0.creationDate":["Date"],"posts.1.creationDate":["Date"],"posts.2.creationDate":["Date"],"posts.3.creationDate":["Date"],"posts.4.creationDate":["Date"],"posts.5.creationDate":["Date"],"posts.6.creationDate":["Date"],"posts.7.creationDate":["Date"]}}},"__N_SSG":true}