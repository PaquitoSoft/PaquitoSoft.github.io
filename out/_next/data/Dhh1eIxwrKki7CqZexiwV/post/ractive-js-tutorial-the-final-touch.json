{"pageProps":{"post":{"slug":"ractive-js-tutorial-the-final-touch","title":"Ractive.js tutorial - The final touch (6 of 6)","creationDate":"2015-08-02T18:32:00.629Z","keywords":"tutorial, javascript, ractive, ractivejs","status":"published","excerpt":"<p>(<em>Previous step: <a href=\"/post/ractive-js-tutorial-managing-users-notes\">Managing user's notes</a></em>)</p>\n<p>There are some little things we should improve in our application:</p>\n<ul>\n<li><a href=\"#home-flickering\">Home flickering</a></li>\n<li><a href=\"#show-errors\">Show errors</a></li>\n<li><a href=\"#cache-ajax\">Cache ajax requests</a></li>\n</ul>\n<h2>Home flickering</h2>\n<p>Right now, if you reload the page with a user page URL in the browser, you first see the home page and then you're redirected to the user page.\nWhen we load the application and the router (<a href=\"https://github.com/visionmedia/page.js\">PageJS</a>) gets initialized, it checks the URL and invokes the corresponding route handler (you can disable this behaviour if you want to by using the <a href=\"https://github.com/visionmedia/page.js#pageoptions\"><em>dispatch</em> attribute</a>).\nAs we have configured the default view to be 'HomePage' in our <em>App</em> instance, it will get loaded before the router does its magic.</p>\n<p>My solution for this is to create an empty view in our <em>App</em> and set it to be the default view, so we won't see any sub-view until the router invokes the right route handler and the right view is promoted to be shown.</p>\n","content":"<p>(<em>Previous step: <a href=\"/post/ractive-js-tutorial-managing-users-notes\">Managing user's notes</a></em>)</p>\n<p>There are some little things we should improve in our application:</p>\n<ul>\n<li><a href=\"#home-flickering\">Home flickering</a></li>\n<li><a href=\"#show-errors\">Show errors</a></li>\n<li><a href=\"#cache-ajax\">Cache ajax requests</a></li>\n</ul>\n<h2>Home flickering</h2>\n<p>Right now, if you reload the page with a user page URL in the browser, you first see the home page and then you're redirected to the user page.\nWhen we load the application and the router (<a href=\"https://github.com/visionmedia/page.js\">PageJS</a>) gets initialized, it checks the URL and invokes the corresponding route handler (you can disable this behaviour if you want to by using the <a href=\"https://github.com/visionmedia/page.js#pageoptions\"><em>dispatch</em> attribute</a>).\nAs we have configured the default view to be 'HomePage' in our <em>App</em> instance, it will get loaded before the router does its magic.</p>\n<p>My solution for this is to create an empty view in our <em>App</em> and set it to be the default view, so we won't see any sub-view until the router invokes the right route handler and the right view is promoted to be shown.</p>\n<p><strong><em>root-folder</em>/app/js/app.js</strong> (<em>include a default empty view</em>)</p>\n<pre><code class=\"language-javascript\">import Ractive from 'ractive';\nimport template from '../views/app.html';\n\nimport * as RouterPlugin from './plugins/router';\nimport routesConfiguration from './config/routes';\n\nimport RouterComponent from './components/layout/router';\nimport SearchUserComponent from './components/layout/search-user';\nimport HomePageComponent from './components/home-page';\nimport UserPageComponent from './components/user-page'\n\nlet App = new Ractive({\n\tel: '#app',\n\ttemplate: template,\n\tcomponents: {\n\t\tSearchUser: SearchUserComponent,\n\t\tRouter: RouterComponent,\n\t\tEmptyPage: Ractive.extend({ template: '' })\n\t},\n\tdata: {\n\t\tcomponentName: 'EmptyPage'\n\t},\n\toninit() {\n\t\tRouterPlugin.init(routesConfiguration, this.onNavigation.bind(this));\n\t\tconsole.log('App::oninit# Application initialized!');\n\t},\n\tonNavigation(error, navigationContext) {\n\t\tconsole.log('APP::onNavigation# Navigating to:', navigationContext.pageName, 'with context:', navigationContext);\n\n\t\tif (error) {\n\t\t\tconsole.warn('App::onNavigation# Error navigating:', error);\n\t\t} else {\n\t\t\tthis.set({\n\t\t\t\treq: {\n\t\t\t\t\tparams: navigationContext.params,\n\t\t\t\t\tbody: navigationContext.state\n\t\t\t\t},\n\t\t\t\tcomponentName: navigationContext.pageName\n\t\t\t});\n\t\t}\n\t}\n});\n\nexport default App;\n</code></pre>\n<h2>Show errors</h2>\n<p>Right now if you look for a user that doesn't exist in GitHub, you won't get notified. The error is only printed in the browser tools console.\nWe just need to add a little <em>html</em> to our main application template and a little code to our <em>App</em> instance to show the message.</p>\n<p><strong><em>root-folder</em>/app/views/app.html</strong> (<em>add error message markup</em>)</p>\n<pre><code class=\"language-html\">&lt;div class=&quot;main-container&quot;&gt;\n\t&lt;nav class=&quot;navbar navbar-default&quot; role=&quot;navigation&quot;&gt;\n\t\t&lt;div class=&quot;col-sm-1&quot;&gt;\n\t\t\t&lt;a href=&quot;/&quot;&gt;\n\t\t\t\t&lt;h3&gt;Notetaker&lt;/h3&gt;\n\t\t\t&lt;/a&gt;\n\t\t&lt;/div&gt;\n\t\t&lt;div class=&quot;col-sm-7 col-sm-offset-1&quot; style=&quot;margin-top: 15px;&quot;&gt;\n\t\t\t&lt;SearchUser placeholder=&quot;Type a GitHub username...&quot; /&gt;\n\t\t&lt;/div&gt;\n\t&lt;/nav&gt;\n\t&lt;div class=&quot;container&quot;&gt;\n\t\t&lt;Router componentName=&quot;{{componentName}}&quot;/&gt;\n\t&lt;/div&gt;\n\t{{#errorMsg}}\n\t\t&lt;div class=&quot;alert alert-danger alert-dismissible&quot; style=&quot;position: absolute; top: 80px; right: 10px;&quot; role=&quot;alert&quot;&gt;\n\t\t\t&lt;button type=&quot;button&quot; class=&quot;close&quot; aria-label=&quot;Close&quot;&gt;&lt;span aria-hidden=&quot;true&quot;&gt;&amp;times;&lt;/span&gt;&lt;/button&gt;\n\t\t\t&lt;strong&gt;Error:&lt;/strong&gt; {{errorMsg}}\n\t\t&lt;/div&gt;\n\t{{/errorMsg}}\n&lt;/div&gt;\n</code></pre>\n<p><strong><em>root-folder</em>/app/js/app.js</strong> (_add 'showAlert' function and use it from the routes handler)</p>\n<pre><code class=\"language-javascript\">import Ractive from 'ractive';\nimport template from '../views/app.html';\n\nimport * as RouterPlugin from './plugins/router';\nimport routesConfiguration from './config/routes';\n\nimport RouterComponent from './components/layout/router';\nimport SearchUserComponent from './components/layout/search-user';\nimport HomePageComponent from './components/home-page';\nimport UserPageComponent from './components/user-page'\n\nlet App = new Ractive({\n\tel: '#app',\n\ttemplate: template,\n\tcomponents: {\n\t\tSearchUser: SearchUserComponent,\n\t\tRouter: RouterComponent,\n\t\tEmptyPage: Ractive.extend({ template: '' })\n\t},\n\tdata: {\n\t\tcomponentName: 'EmptyPage'\n\t},\n\toninit() {\n\t\tRouterPlugin.init(routesConfiguration, this.onNavigation.bind(this));\n\t\tconsole.log('App::oninit# Application initialized!');\n\t},\n\tonNavigation(error, navigationContext) {\n\t\tconsole.log('APP::onNavigation# Navigating to:', navigationContext.pageName, 'with context:', navigationContext);\n\n\t\tif (error) {\n\t\t\tconsole.warn('App::onNavigation# Error navigating:', error);\n\t\t\tthis.showAlert(error.displayMessage || error.message);\n\t\t} else {\n\t\t\tthis.set({\n\t\t\t\treq: {\n\t\t\t\t\tparams: navigationContext.params,\n\t\t\t\t\tbody: navigationContext.state\n\t\t\t\t},\n\t\t\t\tcomponentName: navigationContext.pageName\n\t\t\t});\n\t\t}\n\t},\n\tshowAlert(message) {\n\t\tthis.set('errorMsg', message);\n\t\tsetTimeout(() =&gt; {\n\t\t\tthis.set('errorMsg', null);\n\t\t}, 2500);\n\t}\n});\n\nexport default App;\n</code></pre>\n<h2>Cache ajax requests</h2>\n<p>The users info we're getting from GitHub doesn't change very often and, also, GitHub has <a href=\"https://developer.github.com/v3/#rate-limiting\">some limitations</a> on unauthorized requests you can make per hour.\nIt would be great to cache that info in the broswer (for example: using <em>localStorage</em>) so we avoid those limiations and the application reponds faster when asking for the same user info several times.\nWe will use the great <a href=\"https://github.com/pamelafox/lscache\">lscache</a> library so it handles <em>localStorage</em> management and it allows us to set TTLs (<em>time to live</em>) on our stored values to get automatically invalidated.</p>\n<p>On the one hand, we need to specify which request we want to cache. In our user model, we set the GitHub requests to be cached for one hour.</p>\n<p>First we need to install the dependecy:</p>\n<pre><code>$ npm install lscache --save\n</code></pre>\n<p><strong><em>root-folder</em>/app/js/models/user.js</strong> (<em>set GitHub ajax request to be cached</em>)</p>\n<pre><code class=\"language-javascript\">import * as ajax from '../plugins/ajax';\n\nconst GITHUB_BASE_URL = 'https://api.github.com';\nconst FIREBASE_BASE_URL = `https://ps-github-saver.firebaseio.com`;\n\nclass User {\n\t\n\tconstructor(profile, repos, notes) {\n\t\tthis.profile = profile;\n\t\tthis.repos = repos;\n\t\tthis.notes = notes || []; // Default parameters values are only valid for undefined ones\n\t}\n\n\taddNote(newNote) {\n\t\tthis.notes.push(newNote);\n\t\treturn ajax.putJson(`${FIREBASE_BASE_URL}/${this.profile.login.toLowerCase()}.json`, this.notes);\n\t}\n\n\tremoveNote(note) {\n\t\tvar index = this.notes.indexOf(note);\n\t\tif (index &gt;= 0) {\n\t\t\t\tthis.notes.splice(index, 1);\n\t\t\treturn ajax.putJson(`${FIREBASE_BASE_URL}/${this.profile.login.toLowerCase()}.json`, this.notes);\n\t\t}\n\t}\n\n\tstatic findByName(username) {\n\t\tlet userProfileUrl = `${GITHUB_BASE_URL}/users/${username}`,\n\t\t\tuserReposUrl = `${GITHUB_BASE_URL}/users/${username}/repos`,\n\t\t\tuserNotesUrl = `${FIREBASE_BASE_URL}/${username.toLowerCase()}.json`;\n\n\t\tlet result = new Promise((resolve, reject) =&gt; {\n\t\t\tPromise.all([\n\t\t\t\tajax.getJson(userProfileUrl, {cache: true, ttl: 60}), // TTL in minutes\n\t\t\t\tajax.getJson(userReposUrl, {cache: true, ttl: 60}), // TTL in minutes\n\t\t\t\tajax.getJson(userNotesUrl)\n\t\t\t])\n\t\t\t.then(values =&gt; {\n\t\t\t\tresolve(new User(values[0], values[1], values[2]));\n\t\t\t})\n\t\t\t.catch(reject);\n\t\t});\n\n\t\treturn result;\n\t}\n}\n\nexport default User;\n</code></pre>\n<p>Now we need to update our <em>ajax</em> plugin to use <em>lscache</em> library and deal with caching configuration:\n<strong><em>root-folder</em>/js/app/plugins/ajax.js</strong></p>\n<pre><code class=\"language-javascript\">import lscache from 'lscache';\n\nfunction checkResponseStatus(res) {\n\tif (res.status &lt; 400) {\n\t\treturn res;\n\t} else {\n\t\tlet error = new Error(res.statusText);\n\t\terror.statusCode = res.status;\n\t\terror.response = res;\n\t\tthrow error;\n\t}\n}\n\nfunction parseJson(res) {\n\treturn new Promise((resolve) =&gt; {\n\t\tres.json().then(data =&gt; {\n\t\t\tresolve({\n\t\t\t\tjson: data,\n\t\t\t\turl: res.url\n\t\t\t});\n\t\t});\n\t});\n}\n\nfunction cacheResponse(shouldCache, ttl, key) {\n\treturn (data) =&gt; {\n\t\tif (shouldCache) {\n\t\t\tconsole.log('Ajax::cacheResponse# Caching response with key:', key, 'for', ttl, 'minutes.');\n\t\t\tlscache.set(data.url, data.json, ttl); // Last parameter is TTL in minutes\n\t\t}\n\t\treturn data.json;\n\t}\n}\n\nexport function getJson(url, options = {cache: false}) {\n\tlet data = lscache.get(url);\n\tif (data) {\n\t\treturn Promise.resolve(data);\n\t} else {\n\t\treturn fetch(url)\n\t\t\t.then(checkResponseStatus)\n\t\t\t.then(parseJson)\n\t\t\t.then(cacheResponse(options.cache, options.ttl, url));\n\t}\n}\n\nexport function putJson(url, data) {\n\treturn fetch(url, {\n\t\tmethod: 'put',\n\t\theaders: {\n\t\t\t'Accept': 'application/json',\n\t\t\t'Content-Type': 'application/json'\n\t\t},\n\t\t\tbody: JSON.stringify(data)\n\t\t})\n\t\t.then(checkResponseStatus);\n}\n</code></pre>\n<p>Now you can check with your browser tools that, if you load several times the same user, only the first one will issue request to GitHub.</p>\n<hr>\n<p>You can check the source code in <a href=\"https://github.com/PaquitoSoft/notetaker-ractive\">this GitHub repo</a>.</p>\n<hr>\n<h2>Ending</h2>\n<p>First of all, I want to thank you for getting all the way of this long tutorial until the end.\nI hope you found it insteresting and that you have learned something new that will be useful in the future.</p>\n<p>I decided to write this tutorial not only because I want to spread the word about <a href=\"http://www.ractivejs.org/\">Ractive.js</a> (note that I'm not involved in the project at all; I'm only one of its users), but because in my carrer I have read many many tutorials that helped me to be a better developer and I wanted to give back the same to the community.</p>\n<p>If you liked this tutorial, please talk about it in your favorite social network or to your collegues, and you would make my day if you drop me a line by e-mail (paquitosoftware at gmail.com) or in Twitter (@telemaco82).</p>\n<hr>\n"},"_superjson":{"values":{"post.creationDate":["Date"]}}},"__N_SSG":true}