{"pageProps":{"post":{"slug":"consuming-ga-data-from-nodejs-express-app","title":"Consuming GA data from NodeJS Express app","creationDate":"2013-12-01T21:43:41.405Z","keywords":"nodejs, express, google, analytics, ga, development","status":"published","excerpt":"<p>I didn't have a great time trying to implement a <em>simple</em> feature involving Google Analytics in one of my projects (nodejs web application).</p>\n<p>My humble requirement was to collect some data (events) I was pushing to Google Analytics in order to create a simple report for my users.\nSince it isn't a critical report, my idea was to get the data once a day and cache it.</p>\n<p>So, as simple as it seems, it has been a tough trip for me and I want to share the whole process with the community. I hope anyone trying to achive something similar gets to this article and find it helpful.</p>\n<p>These are the main steps I had to take:</p>\n<ul>\n<li>Register an application in <a href=\"https://code.google.com/apis/console\">Google API console center</a></li>\n<li>Create a service account</li>\n<li>Register the newly created service account generated email into the Google Analytics account I wanted to consume</li>\n<li>Implement the authorization token request (create a <em>JWT</em>)</li>\n<li>Implement the request to collect data from Google Analytics</li>\n</ul>\n","content":"<p>I didn't have a great time trying to implement a <em>simple</em> feature involving Google Analytics in one of my projects (nodejs web application).</p>\n<p>My humble requirement was to collect some data (events) I was pushing to Google Analytics in order to create a simple report for my users.\nSince it isn't a critical report, my idea was to get the data once a day and cache it.</p>\n<p>So, as simple as it seems, it has been a tough trip for me and I want to share the whole process with the community. I hope anyone trying to achive something similar gets to this article and find it helpful.</p>\n<p>These are the main steps I had to take:</p>\n<ul>\n<li>Register an application in <a href=\"https://code.google.com/apis/console\">Google API console center</a></li>\n<li>Create a service account</li>\n<li>Register the newly created service account generated email into the Google Analytics account I wanted to consume</li>\n<li>Implement the authorization token request (create a <em>JWT</em>)</li>\n<li>Implement the request to collect data from Google Analytics</li>\n</ul>\n<h2>Registering an application in Google API console center</h2>\n<p>First of all you need to sign in into <a href=\"https://code.google.com/apis/console\">Google API console center</a> and register a new project. Once you create it (you just need to fill the project name), you should select the <em>Services</em> link in the left vertical menu. Here you can set what Google services your project will need access to. So we click on the <em>Analytics API</em> switch button to activate this permission.</p>\n<p><img src=\"https://lh3.googleusercontent.com/-H2ECcOC-KTk/UN-DZCZzGSI/AAAAAAAAABY/zY0RlFoWPcI/s912/register_google_api_console.jpg\" alt=\"Register a new application in Google API console\"></p>\n<h2>Create a service account</h2>\n<p>Next we need to create the service account.<br>\nIn the left vertical menu you should click in the <em>API Access</em> link. You should see a big blue button saying <em>Create an OAuth Client ID...</em>.</p>\n<p><img src=\"https://lh6.googleusercontent.com/-g7qvSvt3DPQ/UOasmIB_xzI/AAAAAAAAABo/e400jAuaMtA/s912/create_service_account_1.jpg\" alt=\"Create service account (step 1)\"></p>\n<p>Click there and you will be presented a popup to fill some info about the app that will be using the Google service. Fill the project name at least.</p>\n<p><img src=\"https://lh4.googleusercontent.com/-E_3Cq9o3cBk/UOasm4j6JRI/AAAAAAAAABw/-TZqTHHQTY8/s912/create_service_account_2.jpg\" alt=\"Create service account (step 2)\"></p>\n<p>Now you will get to a second step (inside the popup) where you need to choose you want to create a <em>service account</em>.</p>\n<p><img src=\"https://lh4.googleusercontent.com/-Or_U6ntuM7M/UOasoEXN0mI/AAAAAAAAAB0/aD_fJs5IQOI/s912/create_service_account_3.jpg\" alt=\"Create service account (step 3)\"></p>\n<p>After you click in <em>Create client ID</em> button, the popup will show a message stating that public-private key pair has been generated. You will get a password and your private key (the password is for working with the private key).<br>\nSave the private key file ('.p12' file type) into your hard drive.</p>\n<p><img src=\"https://lh5.googleusercontent.com/-y5XEIRMWwwk/UOaspLNWc6I/AAAAAAAAAB8/zN0mMwz8-fU/s912/create_service_account_4.jpg\" alt=\"Create service account (step 4)\"></p>\n<p>When you close the popup you will see a new section in the main page (<em>Service account</em>). You need to take not about the <em>Email address</em> generated for the service account.</p>\n<p><img src=\"https://lh5.googleusercontent.com/-bfkyPN8zCCU/UOasp-zLG3I/AAAAAAAAACE/NPFq01WJA0k/s912/create_service_account_5.jpg\" alt=\"Create service account (step 5)\"></p>\n<p>There's one important last step you need to take here. Google has given you a private key in a '.p12' file, but you will need a <em>.pem</em> file in order to sign your JWT.<br>\nIn order to achieve this step you need to have <em>openssl</em> tool installed in your system.<br>\nOpen a terminal and browse to the folder where you saved the private key. Then type this command:</p>\n<pre><code>my_computer$ openssl pkcs12 -in YOUR_PRIVATE_KEY_FILE.p12 -out demo_certificate.pem -nodes\n</code></pre>\n<p>After that, you will have a new file in your folder called <em>certificate.pem</em>. This is the one we will use later on.</p>\n<h2>Register service account in Google Analytics</h2>\n<p>In this step you need to grant read access to the brand new service account in your Google analytics project.<br>\nLog in to <a href=\"http://www.google.com/analytics/\">Google Analytics</a> and navigate to your project. Enter de <em>Admin</em> section and look for the <em>Users</em> tab.</p>\n<p><img src=\"https://lh4.googleusercontent.com/-mFT-z5XXZag/UOasq46iNEI/AAAAAAAAACM/lMfqqxqfFYg/s912/grant_service_account_access_to_ga_1.jpg\" alt=\"Grant access to service account in Google Analytics (step 1)\"></p>\n<p>Click in the <em>New User</em> button and type the email for the service account you previously created. Use the <em>User</em> role.<br>\nIn the <em>profile</em> section, select your Analytics project profile and add it to <em>Selected profiles</em> panel.<br>\nFinally, push <em>Create user button</em>.</p>\n<p><img src=\"https://lh4.googleusercontent.com/-zhgwYXNEFNc/UOasr9ayMZI/AAAAAAAAACU/Wyl7U__pXkA/s912/grant_service_account_access_to_ga_2.jpg\" alt=\"Grant access to service account in Google Analytics (step 2)\"></p>\n<p>That's it!</p>\n<h2>Implement authorization request</h2>\n<p>In order to access <em>Analytics</em> data, we need to get an authorization token first. We will use the email of the brand new service account created and also the private key (<em>.pem</em> file) to generate a <em>JWT</em> (JSON Web Token). We will send a <em>POST</em> request to Google with this JWT so they answer with an access token.</p>\n<p>Here is my version of the code implementing JWT generation and request:</p>\n<pre><code class=\"language-javascript\">var fs = require('fs'),\n    crypto = require('crypto'),\n\trequest = require('request'); // This is an external module (https://github.com/mikeal/request)\n\t\nvar authHeader = {\n\t\t\t'alg': 'RS256',\n\t\t'typ': 'JWT'\n\t},\n\tauthClaimSet = {\n\t\t\t'iss': process.env.GA_SERVICE_ACCOUNT, // Service account email\n\t\t'scope': 'https://www.googleapis.com/auth/analytics.readonly', // We MUST tell them we just want to read data\n\t\t'aud': 'https://accounts.google.com/o/oauth2/token'\n\t},\n\tSIGNATURE_ALGORITHM = 'RSA-SHA256',\n\tSIGNATURE_ENCODE_METHOD = 'base64',\n\tGA_KEY_PATH = 'PATH_TO_YOUR_PRIVATE_KEY.pem',\n\tgaKey;\n\nfunction urlEscape(source) {\n\t\treturn source.replace(/\\\\+/g, '-').replace(/\\\\//g, '_').replace(/\\\\=+$/, '');\n}\n\nfunction base64Encode(obj) {\n\t\tvar encoded = new Buffer(JSON.stringify(obj), 'utf8').toString('base64');\n\treturn urlEscape(encoded);\n}\n\nfunction readPrivateKey() {\n\t\tif (!gaKey) {\n\t\t\tgaKey = fs.readFileSync(GA_KEY_PATH, 'utf8');\n\t}\n\treturn gaKey;\n}\n\nvar authorize = function(callback) {\n\t\n\tvar self = this,\n\t\tnow = parseInt(Date.now() / 1000, 10), // Google wants us to use seconds\n\t\tcipher,\n\t\tsignatureInput,\n\t\tsignatureKey = readPrivateKey(),\n\t\tsignature,\n\t\tjwt;\n\n\t// Setup time values\n\tauthClaimSet.iat = now;\n\tauthClaimSet.exp = now + 60; // Token valid for one minute\n\n\t// Setup JWT source\n\tsignatureInput = base64Encode(authHeader) + '.' + base64Encode(authClaimSet);\n\n\t// Generate JWT\n\tcipher = crypto.createSign('RSA-SHA256');\n\tcipher.update(signatureInput);\n\tsignature = cipher.sign(signatureKey, 'base64');\n\tjwt = signatureInput + '.' + urlEscape(signature);\n\t\n\t// Send request to authorize this application\n\trequest({\n\t\t\tmethod: 'POST',\n\t\theaders: {\n\t\t\t\t'Content-Type': 'application/x-www-form-urlencoded'\n\t\t},\n\t\turi: 'https://accounts.google.com/o/oauth2/token',\n\t\tbody: 'grant_type=' + escape('urn:ietf:params:oauth:grant-type:jwt-bearer') +\n\t\t\t'&amp;assertion=' + jwt\n\t}, function(error, response, body) {\n\t\t\tif (error) {\n\t\t\t\tconsole.log(error);\n\t\t\tcallback(new Error(error));\n\t\t} else {\n\t\t\t\tvar gaResult = JSON.parse(body);\n\t\t\tif (gaResult.error) {\n\t\t\t\t\tcallback(new Error(gaResult.error));\n\t\t\t} else {\n\t\t\t\t\tcallback(null, gaResult.access_token);\n\t\t\t}\n\t\t}\n\t});\n\n};\n</code></pre>\n<p>The auth request must have two parameters:</p>\n<ul>\n<li>grant_type: This is a constant</li>\n<li>assertion: Generated JWT</li>\n</ul>\n<p>As you can see, JWT is created with three parts:</p>\n<ul>\n<li>a fixed header</li>\n<li>a claim set: info about what are what do we need the access token for</li>\n<li>a signature (generated based on the other two)</li>\n</ul>\n<p>The <em>scope</em> property of the <em>claim set</em> must be set to <em>readonly</em>. At least, I couldn't get it work without it, even if I set the service account with an administrator role in my <em>Analytics</em> project settings.</p>\n<p>The response from <em>Google</em> should be something like this:</p>\n<pre><code class=\"language-javascript\">{\n\t&quot;access_token&quot; : &quot;1/8xbJqaOZXSUZbHLl5EOtu1pxz3fmmetKx9W8CV4t79M&quot;,\n\t&quot;token_type&quot;: &quot;Bearer&quot;,\n\t&quot;expires_in&quot;: 3600\n}\n</code></pre>\n<h2>Implement analytics data request</h2>\n<p>The hard part is already done, this is the easy one.<br>\nNow we only need to make a request to <em>Google Analytics</em> service using our auth token.</p>\n<pre><code class=\"language-javascript\">var request = require('request'),\n\tqs = require('querystring');\n\t\nauthorize(function(err, token) {\n\tif (!err) {\n\t\t// Query the number of total visits for a month\n\t\tvar requestConfig = {\n\t\t\t\t'ids': 'ga:YOUR_ANALYTICS_PROJECT_PROFILE_ID',\n\t\t\t'start-date': '2012-12-01',\n\t\t\t'end-date': '2012-12-21',\n\t\t\t'dimensions': 'ga:visitors'\n\t\t\t'max-results': '10'\n\t\t};\n\t\t\n\t\trequest({\n\t\t\t\tmethod: 'GET',\n\t\t\theaders: {\n\t\t\t\t\t'Authorization': 'Bearer ' + token // Here is where we use the auth token\n\t\t\t},\n\t\t\turi: 'https://www.googleapis.com/analytics/v3/data/ga?' + qs.stringify(requestConfig)\n\t\t}, function(error, resp, body) {\n\t\t\t\tvar data = JSON.parse(body);\n\t\t\tconsole.log(data);\n\t\t});\n\t}\n});\n</code></pre>\n<h2>References:</h2>\n<ul>\n<li><a href=\"https://developers.google.com/accounts/docs/OAuth2ServiceAccount\">Using OAuth 2.0 for Server to Server Applications</a></li>\n<li><a href=\"https://developers.google.com/analytics/devguides/reporting/core/v3/reference\">Google Analytics Core Reporting API - Reference Guide</a></li>\n<li><a href=\"http://ga-dev-tools.appspot.com/explorer/\">Google Analytics Query Explorer 2</a></li>\n<li><a href=\"https://github.com/berngp/node-green-jwt\">node-green-jwt</a></li>\n<li><a href=\"https://github.com/ncb000gt/node-googleanalytics\">node-googleanalytics</a></li>\n<li><a href=\"http://stackoverflow.com/questions/9863509/service-applications-and-google-analytics-api-v3-server-to-server-oauth2-authen\">Stack Overflow 1</a></li>\n<li><a href=\"http://stackoverflow.com/questions/11529595/is-a-service-account-the-right-credentials-for-querying-google-bigquery-in-node\">Stack Overflow 2</a></li>\n</ul>\n"},"_superjson":{"values":{"post.creationDate":["Date"]}}},"__N_SSG":true}