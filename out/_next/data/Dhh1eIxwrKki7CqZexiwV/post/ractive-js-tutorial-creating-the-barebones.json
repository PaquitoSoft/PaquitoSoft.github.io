{"pageProps":{"post":{"slug":"ractive-js-tutorial-creating-the-barebones","title":"Ractive.js tutorial - Creating the barebones (2 of 6)","creationDate":"2015-07-28T20:35:02.558Z","keywords":"tutorial, javascript, ractive, ractivejs","status":"published","excerpt":"<p>(<em>Previous step</em>: <a href=\"/post/ractive-js-tutorial-setting-up-your-environment/\">Setting up your environment</a>)</p>\n<p>Ok, so now that you have all ready to fly, let's check what we want to do.</p>\n<p>The goal is to build a simple app that let us view <a href=\"https://github.com/\">GitHub</a> user's information and, also, to manage our own message notes for every user.\nWe will have a common layout with a static section (the one where you can search for users) and two subviews, having each one a different URL:</p>\n<ul>\n<li>Home page: will only contain a welcome message</li>\n<li>User profile page: will contain three sections for every user info group</li>\n</ul>\n","content":"<p>(<em>Previous step</em>: <a href=\"/post/ractive-js-tutorial-setting-up-your-environment/\">Setting up your environment</a>)</p>\n<p>Ok, so now that you have all ready to fly, let's check what we want to do.</p>\n<p>The goal is to build a simple app that let us view <a href=\"https://github.com/\">GitHub</a> user's information and, also, to manage our own message notes for every user.\nWe will have a common layout with a static section (the one where you can search for users) and two subviews, having each one a different URL:</p>\n<ul>\n<li>Home page: will only contain a welcome message</li>\n<li>User profile page: will contain three sections for every user info group</li>\n</ul>\n<p>This is the home page:\n<img src=\"/content/images/2015/08/ractive-tutorial-03.png\" alt=\"Home page\">\n&lt;br&gt;</p>\n<p>This is the user page:\n<img src=\"/content/images/2015/07/ractive-tutorial-04.png\" alt=\"User profile page\"></p>\n<p>Our main layout will host the header and a dynamic section we will fill with the subsections depending on the URL and the user actions.</p>\n<p>So, the first thing is to create our main <em>html</em> layout.\nOpen the <strong>index.html</strong> file and populate it with this content:</p>\n<pre><code class=\"language-html\">&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n\t&lt;head&gt;\n\t\t&lt;meta charset=&quot;UTF-8&quot;&gt;\n\t\t&lt;title&gt;Ractive Github notetaker&lt;/title&gt;\n\t\t&lt;link rel=&quot;stylesheet&quot; href=&quot;./node_modules/bootstrap/dist/css/bootstrap.css&quot;&gt;\n\t&lt;/head&gt;\n\n\t&lt;body&gt;\n\t\t&lt;div id=&quot;app&quot;&gt;&lt;/div&gt;\n\n\t\t&lt;script src=&quot;dist/js/app-bundle.js&quot;&gt;&lt;/script&gt;\n\t&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<p>This basic <em>html</em> just loads <a href=\"http://getbootstrap.com/\">bootstrap</a> for styling, creates an empty <em>div</em> where we will load our application content, and requests the <em>JS</em> bundle which will contains all of our magic code.</p>\n<p>The way Ractive works it that you create a new instance of its main object specifying the <em>html/handlebars</em> template it will need to deal with, the place in the document it will fills, and the data it must manage (and display). Of course, there are a lot of other properties you can initialize instances with, but keep this idea by now.</p>\n<p>Let's update our main <em>JS</em> file with a <em>Ractive</em> instance that will represent our application.\n<strong><em>root-folder</em>/app/js/app.js</strong>:</p>\n<pre><code class=\"language-language-javascript\">import Ractive from 'ractive';\n\nlet App = new Ractive({\n\t  el: '#app',\n  template: '&lt;input type=&quot;text&quot; value=&quot;{{name}}&quot;&gt;&lt;p&gt;Name: {{name}}&lt;/p&gt;',\n  data: {\n\t    name: 'Paquitosoft'\n  }\n});\n\nexport default App;\n</code></pre>\n<p>Before we go any further, we must install our first production dependency: <a href=\"http://www.ractivejs.org/\">Ractive.js</a></p>\n<pre><code class=\"language-language\">$ npm install ractive --save\n</code></pre>\n<p>Now, if you re/start your server (<em>npm start</em>), you will see a blank page with an input and a label with a text.\nNote how changing the value from the input, the text besides de label gets updated.\nThis is because <em>Ractive data binding</em>, implemented just by linking the value of the input to the <em>name</em> attribute of the Ractive instance <em>data</em>.</p>\n<p>If you've ever used <a href=\"https://github.com/janl/mustache.js\">Mustache</a> or <a href=\"http://handlebarsjs.com/\">Handlebars</a> before, <a href=\"http://docs.ractivejs.org/latest/templates\"><em>Ractive</em> template system</a> is very similar. It's an extension of <em>Mustache</em> with some sugar to make your life easier.</p>\n<p>Notice the <strong>template</strong> attribute we're passing in the Ractive instance initialization. It holds the contents of the template for the purpose of this little example, but we want to have that template in its own file for better organization.</p>\n<p>Let's create a new folder for holding our templates and create the main application one.\n<strong><em>root-folder</em>/app/js/views/app.html</strong></p>\n<pre><code class=\"language-html\">&lt;div class=&quot;main-container&quot;&gt;\n\t&lt;nav class=&quot;navbar navbar-default&quot; role=&quot;navigation&quot;&gt;\n\t\t&lt;div class=&quot;col-sm-1&quot;&gt;\n\t\t\t&lt;a href=&quot;/&quot;&gt;\n\t\t\t\t&lt;h3&gt;Notetaker&lt;/h3&gt;\n\t\t\t&lt;/a&gt;\n\t\t&lt;/div&gt;\n\t\t&lt;div class=&quot;col-sm-7 col-sm-offset-1&quot; style=&quot;margin-top: 15px;&quot;&gt;\n            Here will be the search controls...\n\t\t&lt;/div&gt;\n\t&lt;/nav&gt;\n\t&lt;div class=&quot;container&quot;&gt;\n        Here will be the main content of every route...\n\t&lt;/div&gt;\n&lt;/div&gt;\n</code></pre>\n<p>In order to use this file in our application main file, we need to import it. But, as by default <em>webpack</em> interprets all dependencies as <em>JS</em>, we need to configure it to understand our templates are only text and it doesn't need to process them.\nWe do this by configuring a new <em>webpack</em> loader which allows to simple import the files contents as they are (<a href=\"https://github.com/webpack/raw-loader\">raw-plugin</a>).\n<strong><em>root-folder</em>/webpack.config.js</strong></p>\n<pre><code class=\"language-language-javascript\">module.exports = {\n\t\tentry: './app/js/app.js',\n\toutput: {\n\t\t\tfilename: './dist/js/app-bundle.js'\n\t},\n\tmodule: {\n\t\t\tloaders: [\n\t\t\t\t{\n\t\t\t\t\ttest: /\\\\.js$/,\n\t\t\t\texclude: /(node_modules|bower_components)/,\n\t\t\t\tloader: 'babel'\n\t\t\t},\n\t\t\t{\n\t\t\t\t\ttest: /\\\\.html$/,\n\t\t\t\tloader: 'raw'\n\t\t\t}\n\t\t]\n\t}\n};\n</code></pre>\n<p>Now we import the template in the <em>app</em> file, re/start our main process (<em>npm start</em>) and check <a href=\"\">http://localhost:8080</a>.\n<strong><em>root-folder</em>/app/js/app.js</strong>:</p>\n<pre><code class=\"language-language-javascript\">import Ractive from 'ractive';\nimport template from './views/app.html';\n\nlet App = new Ractive({\n\t  el: '#app',\n  template: template,\n  data: {\n\t    name: 'Paquitosoft'\n  }\n});\n\nexport default App;\n</code></pre>\n<p>&lt;br&gt;</p>\n<h2>Ractive components</h2>\n<p>On top of direct instances, Ractive allows us to use what they call <a href=\"http://docs.ractivejs.org/latest/components\">Components</a>.\nThe idea behind this kind of objects is to allow you to create encapsulated components very much like <a href=\"http://facebook.github.io/react/\">React</a> does.\nOnce you declare and register them (can be globally or per instance/component), you can use it inside your templates as new <em>html</em> entities.</p>\n<p>To demonstrate how they work, we will create a new component to encapsulate the search functionality.\nWe begin by creating the template in a new file:\n<strong><em>root-folder</em>/app/views/search-user.html</strong></p>\n<pre><code class=\"language-html\">&lt;div class=&quot;col-sm-12&quot;&gt;\n\t&lt;form on-submit=&quot;searchUser&quot;&gt;\n\t\t&lt;div class=&quot;form-group col-sm-7&quot;&gt;\n\t\t\t&lt;input type=&quot;text&quot; class=&quot;form-control&quot; value=&quot;{{query}}&quot; autofocus placeholder=&quot;{{placeholder}}&quot;/&gt;\n\t\t&lt;/div&gt;\n\n\t\t&lt;div class=&quot;form-group col-sm-5&quot;&gt;\n\t\t\t&lt;button type=&quot;submit&quot; class=&quot;btn btn-block btn-primary&quot;&gt;Search Github&lt;/button&gt;\n\t\t&lt;/div&gt;\n\t&lt;/form&gt;\n&lt;/div&gt;\n</code></pre>\n<p>Let's comment this template a little bit...</p>\n<p>The <strong>on-submit</strong> attribute in the <em>form</em> tag is a <a href=\"http://docs.ractivejs.org/latest/events-overview\">Ractive proxy event</a> declaration. Every time the user submits the form, the component managing this template will be notified (we'll see how to listen to that event in a moment).</p>\n<p>The <em>input</em> tag has a data binding value with the <strong>query</strong> component data attribute. <em>Ractive</em> will keep the sync. The same goes for the <strong>placeholder</strong>.\nWhile the first one is only used inside the component, we will provide the latter from the parent <em>App</em> instance just to show how you can share data between them.</p>\n<p>You must know that <em>components</em>, by defuault, inherit its parent data context. This search component will be used from the App main instance, meaning that App's data attributes are, by default, visible to the <em>search</em> component.\nPersonally I don't like this kind of behavior by default as components get less reusable when they depend on some context not declared. I prefer to use them in <em>isolated</em> model, where they create an own data attributes context  which you can pass specific parameters.</p>\n<p>Let's create our component in a new file:\n<strong><em>root-folder</em>/app/js/components/layout/search-user.js</strong></p>\n<pre><code class=\"language-language-javascript\">import Ractive from 'ractive';\nimport Template from '../../../views/layout/search-user.html';\n\nvar SearchGithub = Ractive.extend({\n\t\tisolated: true,\n\ttemplate: Template,\n\n\toninit() {\n\t\t\tthis.on('searchUser', (rEvent) =&gt; {\n\t\t\t\trEvent.original.preventDefault();\n\n\t\t\tlet username = rEvent.context.query;\n\t\t\t\n\t\t\tconsole.log('This is the user you want to look up:', username);\n\t\t});\n\t},\n\n\tdata: {\n\t\t\tquery: ''\n\t}\n});\n\nexport default SearchGithub;\n</code></pre>\n<p>The way we create a <em>Ractive</em> component is by executing its <strong>extend</strong> function, passing the attributes which configure the component:</p>\n<ul>\n<li>isolated: We set this attribute to false so a new independent data context it's created for this component.</li>\n<li>temaplate: Set the template we previously declared.</li>\n<li>oninit: This function will be executed everytime the component gets initialized (Check <a href=\"http://docs.ractivejs.org/latest/lifecycle-events\">this link</a> to review the info of all life-cycle events).</li>\n<li>data: Here we define the inner properties.</li>\n</ul>\n<p>Also, in our <em>oninit</em> handler we set up a listener for the <strong>on-submit</strong> event by listening to the custom event <strong>searchUser</strong>.\nThe handler receives an extension of the native browser event enhanced with some useful information (check the <em>Event arguments</em> section of the <a href=\"http://docs.ractivejs.org/latest/proxy-events\">proxy events</a> docs to see the details).\nWe access the <em>original</em> property where we find the native browser event just to prevent default behavior. Note that you could also get this by returning <em>false</em> from this listener function, but that also stops event propagation.\nThe <strong>context</strong> attribute for the event holds a data reference to the context where the event took place. In this case is the <em>input</em> tag, represented by an object with its data bindings.</p>\n<p>So now that we have our component set up, let's use it from the App.\nFirst we need to update the App markup:\n<strong><em>root-folder</em>/app/views/app.html</strong></p>\n<pre><code class=\"language-html\">&lt;div class=&quot;main-container&quot;&gt;\n\t&lt;nav class=&quot;navbar navbar-default&quot; role=&quot;navigation&quot;&gt;\n\t\t&lt;div class=&quot;col-sm-1&quot;&gt;\n\t\t\t&lt;a href=&quot;/&quot;&gt;\n\t\t\t\t&lt;h3&gt;Notetaker&lt;/h3&gt;\n\t\t\t&lt;/a&gt;\n\t\t&lt;/div&gt;\n\t\t&lt;div class=&quot;col-sm-7 col-sm-offset-1&quot; style=&quot;margin-top: 15px;&quot;&gt;\n\t\t\t&lt;SearchUser placeholder=&quot;Type a GitHub username...&quot; /&gt;\n\t\t&lt;/div&gt;\n\t&lt;/nav&gt;\n\t&lt;div class=&quot;container&quot;&gt;\n\t\tHere will be the main content of every route...\n\t&lt;/div&gt;\n&lt;/div&gt;\n</code></pre>\n<p>Take note about how we're providing some data to the component by providing a tag attribute (<em>placeholder</em>).</p>\n<p>Second, we update our <em>App</em> instance to tell it to use the <em>search-user</em> component:\n<strong><em>root-folder</em>/app/js/app.js</strong></p>\n<pre><code class=\"language-language-javascript\">import Ractive from 'ractive';\nimport template from '../views/app.html';\nimport SearchUserComponent from './components/layout/search-user';\n\nlet App = new Ractive({\n\t  el: '#app',\n  template: template,\n  components: {\n\t  \tSearchUser: SearchUserComponent\n  }\n});\n\nexport default App;\n</code></pre>\n<p>We've just imported the <em>search-user</em> component and we set it as an <em>App</em> component using its <strong>components</strong> attributes. You just need to configure an object with the <em>components</em> you will use in your instance (or <em>component</em>) where the key is the name you will use for the <em>component</em> in the template and the value will be the <em>component class</em>.</p>\n<p>You can also register the components globally like this:</p>\n<pre><code class=\"language-language-javascript\">Ractive.components.SearchUser = SearchUserComponent\n</code></pre>\n<p>The benefit is that all Ractive instances and <em>components</em> will <em>see</em> the component.\nThe downside is that you loose visibility about which components your instance/component is using in the code.\nThis is just a personal choice, and I prefer being specific.</p>\n<p>Ok, if you reload you browser now, you must see this picture:\n<img src=\"/content/images/2015/07/ractive-tutorial-05.png\" alt=\"\"></p>\n<p>The last step on this post is to also create a component for the main dynamic section representing the home page.\nWe will do this for the sake of modularity and to get ready for the next post about routing.\nThe template is very simple:\n<strong><em>root-folder</em>/app/views/home-page.html</strong></p>\n<pre><code class=\"language-html\">&lt;h2 class=&quot;text-center&quot;&gt;\n\tSearch by Github username above\n&lt;/h2&gt;\n</code></pre>\n<p>The component is also trivial:\n<strong><em>root-folder</em>/app/js/components/home-page.js</strong></p>\n<pre><code class=\"language-language-javascript\">import Ractive from 'ractive';\nimport Template from '../../views/home-page.html';\n\nvar HomePage = Ractive.extend({\n\t\ttemplate: Template\n});\n\nexport default HomePage;\n</code></pre>\n<p>Now update App to use this new component:\n<strong><em>root-folder</em>/app/views/app.html</strong></p>\n<pre><code class=\"language-html\">&lt;div class=&quot;main-container&quot;&gt;\n\t&lt;nav class=&quot;navbar navbar-default&quot; role=&quot;navigation&quot;&gt;\n\t\t&lt;div class=&quot;col-sm-1&quot;&gt;\n\t\t\t&lt;a href=&quot;/&quot;&gt;\n\t\t\t\t&lt;h3&gt;Notetaker&lt;/h3&gt;\n\t\t\t&lt;/a&gt;\n\t\t&lt;/div&gt;\n\t\t&lt;div class=&quot;col-sm-7 col-sm-offset-1&quot; style=&quot;margin-top: 15px;&quot;&gt;\n\t\t\t&lt;SearchUser placeholder=&quot;Type a GitHub username...&quot; /&gt;\n\t\t&lt;/div&gt;\n\t&lt;/nav&gt;\n\t&lt;div class=&quot;container&quot;&gt;\n\t\t&lt;HomePage /&gt;\n\t&lt;/div&gt;\n&lt;/div&gt;\n</code></pre>\n<p><strong><em>root-folder</em>/app/js/app.js</strong></p>\n<pre><code class=\"language-language-javascript\">import Ractive from 'ractive';\nimport template from '../views/app.html';\nimport SearchUserComponent from './components/layout/search-user';\nimport HomePageComponent from './components/home-page';\n\nlet App = new Ractive({\n\t  el: '#app',\n  template: template,\n  components: {\n\t  \tSearchUser: SearchUserComponent,\n  \tHomePage: HomePageComponent\n  }\n});\n\nexport default App;\n</code></pre>\n<h2>Summary</h2>\n<ul>\n<li>We now know what we want to build.</li>\n<li>We created the main App instance using <em>Ractive</em>.</li>\n<li>We configured <a href=\"http://webpack.github.io/\">webpack</a> to make it load our <em>html</em> templates.</li>\n<li>We got some insights about this library and how it works: what components are, how to configure data bindings, how to listen to DOM events and how to handle data contexts.</li>\n<li>We divided our little application in pieces both in terms of presentation (views) and behavior (components).</li>\n</ul>\n<hr>\n<p>You can check the source code in <a href=\"https://github.com/PaquitoSoft/notetaker-ractive\">this GitHub repo</a>.</p>\n<hr>\n<p>Previous post: <a href=\"/post/ractive-js-tutorial-setting-up-your-environment\">Setting up your environment</a>\nNext post: <a href=\"/post/ractive-js-tutorial-routing\">Routing</a></p>\n<hr>\n"},"_superjson":{"values":{"post.creationDate":["Date"]}}},"__N_SSG":true}