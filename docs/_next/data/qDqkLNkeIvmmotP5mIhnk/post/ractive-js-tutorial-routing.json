{"pageProps":{"post":{"slug":"ractive-js-tutorial-routing","title":"Ractive.js tutorial - Routing (3 of 6)","creationDate":"2015-08-01T15:15:44.447Z","keywords":"tutorial, javascript, ractive, ractivejs","status":"published","excerpt":"<p>(<em>Previous step</em>: <a href=\"/post/ractive-js-tutorial-creating-the-barebones\">Creating the barebones</a>)</p>\n<p><em>Ractive</em> does not have its own <a href=\"http://docs.ractivejs.org/latest/routing\">routing system</a> becouse it is a library, not a framework, and routing is not part of its goal.\nIn the link above you can see they recommend:</p>\n<ul>\n<li><a href=\"http://backbonejs.org/#Router\">Backbone.Router</a></li>\n<li><a href=\"https://visionmedia.github.io/page.js/\">PageJS</a></li>\n</ul>\n<p>There is also a Ractive specific router built by Martin Kolarik you can check:</p>\n<ul>\n<li><a href=\"https://github.com/MartinKolarik/ractive-route\">Ractive-route</a></li>\n</ul>\n<p>As I already have some experience with <em>PageJS</em> I will be using that library for implementing a custom made routing subsystem.</p>\n","content":"<p>(<em>Previous step</em>: <a href=\"/post/ractive-js-tutorial-creating-the-barebones\">Creating the barebones</a>)</p>\n<p><em>Ractive</em> does not have its own <a href=\"http://docs.ractivejs.org/latest/routing\">routing system</a> becouse it is a library, not a framework, and routing is not part of its goal.\nIn the link above you can see they recommend:</p>\n<ul>\n<li><a href=\"http://backbonejs.org/#Router\">Backbone.Router</a></li>\n<li><a href=\"https://visionmedia.github.io/page.js/\">PageJS</a></li>\n</ul>\n<p>There is also a Ractive specific router built by Martin Kolarik you can check:</p>\n<ul>\n<li><a href=\"https://github.com/MartinKolarik/ractive-route\">Ractive-route</a></li>\n</ul>\n<p>As I already have some experience with <em>PageJS</em> I will be using that library for implementing a custom made routing subsystem.</p>\n<h2>User page</h2>\n<p>Right now we only have implemented our <em>home</em> page so let's begin by creating our <em>user</em> page.\nThis page will have three sections: Github user profile, Github user repos and our persisted notes about the user.\nLet's create the sections and then, the page which uses them.</p>\n<p><strong><em>root-folder</em>/app/views/user/profile-section.html</strong></p>\n<pre><code class=\"language-html\">&lt;div&gt;\n\t&lt;h3&gt; User Profile &lt;/h3&gt;\n\t&lt;ul class=&quot;list-group&quot;&gt;\n\t\t{{#profile.avatar_url}}&lt;li class=&quot;list-group-item&quot;&gt; &lt;img src={{profile.avatar_url}} class=&quot;img-rounded img-responsive&quot; style=&quot;min-height: 261px;&quot;/&gt;&lt;/li&gt;{{/profile.avatar_url}}\n\t\t{{#profile.name}}&lt;li class=&quot;list-group-item&quot;&gt;Name: {{profile.name}}&lt;/li&gt;{{/profile.name}}\n\t\t{{#profile.login}}&lt;li class=&quot;list-group-item&quot;&gt;Username: {{profile.login}}&lt;/li&gt;{{/profile.login}}\n\t\t{{#profile.email}}&lt;li class=&quot;list-group-item&quot;&gt;Email: {{profile.email}}&lt;/li&gt;{{/profile.email}}\n\t\t{{#profile.location}}&lt;li class=&quot;list-group-item&quot;&gt;Location: {{profile.location}}&lt;/li&gt;{{/profile.location}}\n\t\t{{#profile.company}}&lt;li class=&quot;list-group-item&quot;&gt;Company: {{profile.company}}&lt;/li&gt;{{/profile.company}}\n\t\t{{#profile.followers}}&lt;li class=&quot;list-group-item&quot;&gt;Followers: {{profile.followers}}&lt;/li&gt;{{/profile.followers}}\n\t\t{{#profile.following}}&lt;li class=&quot;list-group-item&quot;&gt;Following: {{profile.following}}&lt;/li&gt;{{/profile.following}}\n\t\t{{#profile.public_repos}}&lt;li class=&quot;list-group-item&quot;&gt;Public Repos: {{profile.public_repos}}&lt;/li&gt;{{/profile.public_repos}}\n\t\t{{#profile.blog}}&lt;li class=&quot;list-group-item&quot;&gt;Blog: &lt;a href=&quot;{{profile.blog}}&quot; target=&quot;_blank&quot;&gt;{{profile.blog}}&lt;/a&gt;&lt;/li&gt;{{/profile.blog}}\n\t&lt;/ul&gt;\n&lt;/div&gt;\n</code></pre>\n<p><strong><em>root-folder</em>/app/js/components/user/profile-section.js</strong></p>\n<pre><code class=\"language-language-javascript\">import Ractive from 'ractive';\nimport Template from '../../../views/user/profile-section.html';\n\nvar UserProfileSection = Ractive.extend({\n\t\tisolated: true,\n\ttemplate: Template\n});\n\nexport default UserProfileSection;\n</code></pre>\n<hr>\n<p><strong><em>root-folder</em>/app/views/user/repos-section.html</strong></p>\n<pre><code class=\"language-html\">&lt;div&gt;\n\t&lt;h3&gt;User repos ({{repos.length}})&lt;/h3&gt;\n\t&lt;ul class=&quot;list-group&quot;&gt;\n\t\t{{#each repos}}\n\t\t\t&lt;li class=&quot;list-group-item&quot;&gt;\n\t\t\t\t{{#html_url}}\n\t\t\t\t\t&lt;h4&gt;&lt;a href=&quot;{{html_url}}&quot; target=&quot;_blank&quot;&gt;{{name}}&lt;/a&gt;&lt;/h4&gt;\n\t\t\t\t{{/html_url}}\n\t\t\t\t{{#description}}\n\t\t\t\t\t&lt;p&gt;{{description}}&lt;/p&gt;\n\t\t\t\t{{/description}}\n\t\t\t&lt;/li&gt;\n\t\t{{/each}}\n\t&lt;/ul&gt;\n&lt;/div&gt;\n</code></pre>\n<p><strong><em>root-folder</em>/app/js/components/user/repos-section.js</strong></p>\n<pre><code class=\"language-language-javascript\">import Ractive from 'ractive';\nimport Template from '../../../views/user/repos-section.html';\n\nvar ReposSection = Ractive.extend({\n\t\tisolated: true,\n\ttemplate: Template\n\t// If we declare here data with attributes provided from\n\t// the template, it stops working\n\t// This is the nearest issue I found: https://github.com/ractivejs/ractive/issues/1977\n\t/*,\n\tdata: {\n\t\t\trepos: []\n\t}*/\n});\n\nexport default ReposSection;\n</code></pre>\n<hr>\n<p><strong><em>root-folder</em>/app/views/user/notes-section.html</strong></p>\n<pre><code class=\"language-html\">&lt;div&gt;\n\t&lt;h3&gt; Notes &lt;/h3&gt;\n\t&lt;p&gt;To be filled later...&lt;/p&gt;\n&lt;/div&gt;\n</code></pre>\n<p><strong><em>root-folder</em>/app/js/components/user/notes-section.js</strong></p>\n<pre><code class=\"language-language-javascript\">'use strict';\n\nimport Ractive from 'ractive';\nimport Template from '../../../views/user/notes-section.html';\n\nvar NotesSection = Ractive.extend({\n\t\tisolated: true,\n\ttemplate: Template\n});\n\nexport default NotesSection;\n</code></pre>\n<hr>\n<p>Finally, our <em>user</em> page which uses previous sections:\n<strong><em>root-folder</em>/app/views/user-page.html</strong></p>\n<pre><code class=\"language-html\">&lt;div class=&quot;row&quot;&gt;\n\t&lt;div class=&quot;col-md-4&quot;&gt;\n\t\t&lt;UserProfile /&gt;\n\t&lt;/div&gt;\n\t&lt;div class=&quot;col-md-4&quot;&gt;\n\t\t&lt;Repos /&gt;\n\t&lt;/div&gt;\n\t&lt;div class=&quot;col-md-4&quot;&gt;\n\t\t&lt;Notes /&gt;\n\t&lt;/div&gt;\n&lt;/div&gt;\n</code></pre>\n<p><strong><em>root-folder</em>/app/js/components/user-page.js</strong></p>\n<pre><code class=\"language-language-javascript\">import Ractive from 'ractive';\nimport Template from '../../views/user-page.html';\nimport UserProfile from './user/profile-section';\nimport Repos from './user/repos-section';\nimport Notes from './user/notes-section';\n\nvar UserPage = Ractive.extend({\n\t\ttemplate: Template,\n\tcomponents: {\n\t\t\tUserProfile: UserProfile,\n\t\tRepos: Repos,\n\t\tNotes: Notes\n\t}\n});\n\nexport default UserPage;\n</code></pre>\n<p>Now, to check that everything is ok, we can update the <em>App</em> to render this page instead of the home page.</p>\n<p>Modify these files like this:\n<strong><em>root-folder</em>/app/js/app.js</strong> (import and declare the new user page component):</p>\n<pre><code class=\"language-language-javascript\">import Ractive from 'ractive';\nimport template from '../views/app.html';\nimport SearchUserComponent from './components/layout/search-user';\nimport HomePageComponent from './components/home-page';\nimport UserPageComponent from './components/user-page'\n\nlet App = new Ractive({\n\t  el: '#app',\n  template: template,\n  components: {\n\t  \tSearchUser: SearchUserComponent,\n  \tHomePage: HomePageComponent,\n  \tUserPage: UserPageComponent\n  }\n});\n\nexport default App;\n</code></pre>\n<p><strong><em>root-folder</em>/app/views/app.html</strong> (change the main section)</p>\n<pre><code class=\"language-html\">&lt;div class=&quot;main-container&quot;&gt;\n\t&lt;nav class=&quot;navbar navbar-default&quot; role=&quot;navigation&quot;&gt;\n\t\t&lt;div class=&quot;col-sm-1&quot;&gt;\n\t\t\t&lt;a href=&quot;/&quot;&gt;\n\t\t\t\t&lt;h3&gt;Notetaker&lt;/h3&gt;\n\t\t\t&lt;/a&gt;\n\t\t&lt;/div&gt;\n\t\t&lt;div class=&quot;col-sm-7 col-sm-offset-1&quot; style=&quot;margin-top: 15px;&quot;&gt;\n\t\t\t&lt;SearchUser placeholder=&quot;Type a GitHub username...&quot; /&gt;\n\t\t&lt;/div&gt;\n\t&lt;/nav&gt;\n\t&lt;div class=&quot;container&quot;&gt;\n\t\t&lt;UserPage /&gt;\n\t&lt;/div&gt;\n&lt;/div&gt;\n</code></pre>\n<p>If you load the appliction right now, you should see something like this:\n<img src=\"/content/images/2015/08/ractive-tutorial-06.png\" alt=\"\"></p>\n<h2>Router component</h2>\n<p>Great, let's talk about routing...\nRight now, in our application template we're telling which page to use with this section:</p>\n<pre><code class=\"language-html\">&lt;div class=&quot;container&quot;&gt;\n  &lt;UserPage/&gt;\n&lt;/div&gt;\n</code></pre>\n<p>We want to use a custom component that uses the page component corresponding to the current route.\nWe will be creating a <em>Route</em> component which accepts an attribute indicating which page component it should render.\n<strong><em>root-folder</em>/app/js/component/layout/router.js</strong></p>\n<pre><code class=\"language-language-javascript\">import Ractive from 'ractive';\n\n/*\n\tThis router has been built on top of the ideas from this Stack Overflow question:\n\thttp://stackoverflow.com/questions/31075341/how-to-create-ractives-subcomponents-dynamically-and-change-them-programmatical\n*/\n\nvar Router = Ractive.extend({\n\t\ttemplate: '&lt;router-handler/&gt;',\n\tcomponents: {\n\t\t\t'router-handler': function() {\n\t\t\t\treturn this.get('componentName');\n\t\t}\n\t},\n\toninit: function() {\n\t\t\tthis.observe('componentName', function(newValue, oldValue) {\n\t\t\t\tif (this.fragment.rendered) {\n\t\t\t\t\tthis.reset();\n\t\t\t}\n\t\t});\n\t}\n});\n\nexport default Router;\n</code></pre>\n<p>There are a lot of things happening here:</p>\n<ol>\n<li>The template is very basic as it just needs what page component to use. We define a <em>route-handler</em> inner component which is linked in the second step.</li>\n<li>We define the inner component so that instead of being a component class, it is a function that returns the page component it should use. The page component will be a router data attribute which will be updated from the <em>App</em>. Take note that we don't define this component as isolated as we want it to be aware of the page component it should render, which will be handled from the <em>App</em> instance.</li>\n<li>When this <em>router</em> component is initialized, it registers a listener on the <em>componentName</em> data attribute from its context (which inherits from its parent, <em>App</em> instance) so that, every time it gets updated, this component calls its <strong>reset</strong> function, which causes it to re-render, using the new page component set in the <em>componentName</em> attribute.</li>\n<li>We have a conditional statement so we don't do this if the component has not been already rendered for the first time (bootstraping).</li>\n</ol>\n<p>Now we need to update our <em>App</em> instance so it makes use of this new component, instead of setting in its template which page component to use.\n<strong><em>root-folder</em>/app/views/app.html</strong></p>\n<pre><code class=\"language-html\">&lt;div class=&quot;main-container&quot;&gt;\n\t&lt;nav class=&quot;navbar navbar-default&quot; role=&quot;navigation&quot;&gt;\n\t\t&lt;div class=&quot;col-sm-1&quot;&gt;\n\t\t\t&lt;a href=&quot;/&quot;&gt;\n\t\t\t\t&lt;h3&gt;Notetaker&lt;/h3&gt;\n\t\t\t&lt;/a&gt;\n\t\t&lt;/div&gt;\n\t\t&lt;div class=&quot;col-sm-7 col-sm-offset-1&quot; style=&quot;margin-top: 15px;&quot;&gt;\n\t\t\t&lt;SearchUser placeholder=&quot;Type a GitHub username...&quot; /&gt;\n\t\t&lt;/div&gt;\n\t&lt;/nav&gt;\n\t&lt;div class=&quot;container&quot;&gt;\n\t\t&lt;Router componentName=&quot;{{componentName}}&quot;/&gt;\n\t&lt;/div&gt;\n&lt;/div&gt;\n</code></pre>\n<p>Take note about the attribute we're passing to Router component from the markup.</p>\n<p>We also need to update the <em>App</em> to create the <em>componentName</em> property so we can handle there the value for the page we must show.</p>\n<pre><code class=\"language-language-javascript\">import Ractive from 'ractive';\nimport template from '../views/app.html';\nimport SearchUserComponent from './components/layout/search-user';\nimport HomePageComponent from './components/home-page';\nimport UserPageComponent from './components/user-page'\n\nlet App = new Ractive({\n\t  el: '#app',\n  template: template,\n  components: {\n\t  \tSearchUser: SearchUserComponent,\n  \tHomePage: HomePageComponent,\n  \tUserPage: UserPageComponent\n  },\n  data: {\n\t  \tcomponentName: 'HomePage'\n  }\n});\n\nexport default App;\n</code></pre>\n<p>Now, if you reload your browser, you should see the <em>home</em> page again, and, if you change the <em>componentName</em> data attribute from <em>HomePage</em> to <em>UserPage</em> and reload your browser again, you should see the user page instead.</p>\n<p>Ok, so now we have the ability to show different pages from the <em>App</em>, but how do we link this to URL changes and how do we navigate from one to another?\nThis is when we begin using <a href=\"https://visionmedia.github.io/page.js/\">PageJS</a>. Like every other routing library, it allows us to be notified when the URL changes, it can force URL changes and it also allows to handle redirects.</p>\n<p>Take a moment to install the library in our project:</p>\n<pre><code>$ npm install page --save\n</code></pre>\n<p>We will create our own library module on top of <em>PageJS</em> which will be initialized from our <em>App</em> instance, getting passed the routing configuration, so it knows which function is has to invoke for every registerd route.</p>\n<p>Let's begin by defining routing configuration module:\n<strong><em>root-folder</em>/app/js/config/routes.js</strong></p>\n<pre><code class=\"language-language-javascript\">'use strict';\n\nimport router from '../plugins/router';\nimport HomePage from '../components/home-page';\nimport UserPage from '../components/user-page';\n\nvar routes = new Map();\n\nroutes.set('/', (context, next) =&gt; {\n\t\tnext(null, HomePage);\n});\n\nroutes.set('/user/:username', (context, next) =&gt; {\n\t\tnext(null, UserPage);\n});\n\nexport default routes;\n</code></pre>\n<p>Now, the router module:\n<strong><em>root-folder</em>/app/js/plugins/router.js</strong></p>\n<pre><code class=\"language-language-javascript\">import page from 'page';\nimport Ractive from 'ractive';\n\nfunction navigationHandler(routeHandler, onNavigation) {\n\t\treturn function(context/*, next*/) {\n\t\t\trouteHandler(context, (error, PageComponent = {}, data = {}) =&gt; {\n\t\t\t\tcontext.pageName = PageComponent._name;\n\t\t\tcontext.state = data;\n\t\t\tonNavigation(error, context);\n\t\t})\n\t};\n}\n\nexport function init(routes, onNavigation) {\n\t\n\troutes.forEach((routeHandler, path) =&gt; {\n\t\t\tpage(path, navigationHandler(routeHandler, onNavigation));\n\t});\n\n\tpage({\n\t\t\thashbang: true\n\t});\n}\n\nexport function navTo(url) {\n\t\tpage.show(url);\n}\n</code></pre>\n<p>The <em>init</em> function gets the configuration map and a callback as parameters. The second one will be invoked after the router handler gets executed with a <em>context</em> object containing routing information and the data passed from the route handler function (defined in the <em>routes.js</em> filed).\nThe last line in this file initializes <em>PageJS</em> so, by default, it intercepts all links and checks if we have a handler configured for them.\nWe also pass the configuration <em>hashbang: true</em> so we don't use HTML5 <em>pushState</em> and use the URL hash fragment instead, as we won't be using a server and the application would fail if we try to load an URL like this: http://localhost:8080/user/paquitosoft.</p>\n<p>This file also has a <em>navTo</em> function so we can programatically navigate to any route. We will use it from our <em>SearchUser</em> component.</p>\n<p>Ok, lets update our <em>App</em> instance to deal with routing with all we have done until now:\n<strong><em>root-folder</em>/app/js/app.js</strong></p>\n<pre><code class=\"language-language-javascript\">import Ractive from 'ractive';\nimport template from '../views/app.html';\n\nimport * as RouterPlugin from './plugins/router';\nimport routesConfiguration from './config/routes';\n\nimport RouterComponent from './components/layout/router';\nimport SearchUserComponent from './components/layout/search-user';\nimport HomePageComponent from './components/home-page';\nimport UserPageComponent from './components/user-page'\n\nlet App = new Ractive({\n\t\tel: '#app',\n\ttemplate: template,\n\tcomponents: {\n\t\t\tSearchUser: SearchUserComponent,\n\t\tRouter: RouterComponent,\n\t\tHomePage: HomePageComponent,\n\t\tUserPage: UserPageComponent\n\t},\n\tdata: {\n\t\t\tcomponentName: 'HomePage'\n\t},\n\toninit() {\n\t\t\tRouterPlugin.init(routesConfiguration, this.onNavigation.bind(this));\n\t\tconsole.log('App::oninit# Application initialized!');\n\t},\n\tonNavigation(error, navigationContext) {\n\t\t\tconsole.log('APP::onNavigation# Navigating to:', navigationContext.pageName, 'with context:', navigationContext);\n\n\t\tif (error) {\n\t\t\t\tconsole.warn('App::onNavigation# Error navigating:', error);\n\t\t} else {\n\t\t\t\tthis.set({\n\t\t\t\t\treq: {\n\t\t\t\t\t\tparams: navigationContext.params,\n\t\t\t\t\tbody: navigationContext.state\n\t\t\t\t},\n\t\t\t\tcomponentName: navigationContext.pageName\n\t\t\t});\n\t\t}\n\t}\n});\n\nexport default App;\n</code></pre>\n<p>Now, when the <em>App</em> is initialized, it configures the route module passing the routes configuration and a callback function.\nWhen the callback gets called, we update the data context setting the <em>componentName</em> attribute to the name of the page component we need to show. The value gets to this function in the <em>navigationContext</em> parameter which gets passed from the router plugin, which gets it from the routes configuration the <em>App</em> passed upon initialization.</p>\n<p>The last touch is to update the home page so we can test our navigation:\n<strong><em>root-folder</em>/app/views/app.html</strong></p>\n<pre><code class=\"language-html\">&lt;h2 class=&quot;text-center&quot;&gt;\n\tSearch by Github username above\n&lt;/h2&gt;\n&lt;p&gt;\n\tNav to &lt;a href=&quot;/user/paquitosoft&quot;&gt;User Page&lt;/a&gt;\n&lt;/p&gt;\n</code></pre>\n<p>Now, if you load the home page on your browser (http://localhost:8080/), you should see this:\n<img src=\"/content/images/2015/08/ractive-tutorial-07.png\" alt=\"\"></p>\n<p>You can follow the lower-left link to load the user page and use the upper-left (<em>Notetaker</em>) title link to get back to the home page.\n(_Remember to remove the lower-left link once you're done with your tests).</p>\n<hr>\n<p>You can check the source code in <a href=\"https://github.com/PaquitoSoft/notetaker-ractive\">this GitHub repo</a>.</p>\n<hr>\n<p>Previous post: <a href=\"/post/ractive-js-tutorial-creating-the-barebones\">Creating the barebones</a>\nNext post: <a href=\"/post/ractive-js-tutorial-loading-user-info\">Loading user info</a></p>\n<hr>\n"},"_superjson":{"values":{"post.creationDate":["Date"]}}},"__N_SSG":true}