{"pageProps":{"post":{"slug":"ractive-js-tutorial-managing-users-notes","title":"Ractive.js tutorial - Managing user's notes (5 of 6)","creationDate":"2015-08-02T11:03:31.081Z","keywords":"tutorial, javascript, ractive, ractivejs","status":"published","excerpt":"<p>(<em>Previous step: <a href=\"/post/ractive-js-tutorial-loading-user-info\">Loading user info</a></em>)</p>\n<p>Now we want to add to our little application the ability to create and delete notes for the users we can already see.\nWe will have a collection of notes for every user.</p>\n<p>We need somewhere to store that notes and, for this tutorial, we'll use <a href=\"https://www.firebase.com/\">Firebase</a> free plan service.\nIf you don't have an account, go and create one. Once you have it, create a new APP from your account page.\nNow that you have your APP created, take note of its URL, as we'll be using it to integrate our application using <a href=\"https://www.firebase.com/docs/rest/quickstart.html\">Firebase REST API</a>.\nThe URL should be something like this: https://ps-github-saver.firebaseio.com/.</p>\n<p>First of all, we're going to populate our notes component, as right now it's empty.\nWe could just put all the code in the <em>notes-section</em> component, but for the sake of modularity (it would also help with the testing), we will have another two components:</p>\n<ul>\n<li>add-note: a little component to handle notes creation.</li>\n<li>notes-list: a little component to show current notes and allow removing them.</li>\n</ul>\n","content":"<p>(<em>Previous step: <a href=\"/post/ractive-js-tutorial-loading-user-info\">Loading user info</a></em>)</p>\n<p>Now we want to add to our little application the ability to create and delete notes for the users we can already see.\nWe will have a collection of notes for every user.</p>\n<p>We need somewhere to store that notes and, for this tutorial, we'll use <a href=\"https://www.firebase.com/\">Firebase</a> free plan service.\nIf you don't have an account, go and create one. Once you have it, create a new APP from your account page.\nNow that you have your APP created, take note of its URL, as we'll be using it to integrate our application using <a href=\"https://www.firebase.com/docs/rest/quickstart.html\">Firebase REST API</a>.\nThe URL should be something like this: https://ps-github-saver.firebaseio.com/.</p>\n<p>First of all, we're going to populate our notes component, as right now it's empty.\nWe could just put all the code in the <em>notes-section</em> component, but for the sake of modularity (it would also help with the testing), we will have another two components:</p>\n<ul>\n<li>add-note: a little component to handle notes creation.</li>\n<li>notes-list: a little component to show current notes and allow removing them.</li>\n</ul>\n<p>Let's go for the sub-components:\n<strong><em>root-folder</em>/app/views/user/add-note.html</strong></p>\n<pre><code class=\"language-html\">&lt;form on-submit=&quot;createNote&quot;&gt;\n\t&lt;div class=&quot;input-group&quot;&gt;\n\t\t&lt;input type=&quot;text&quot; class=&quot;form-control&quot; value=&quot;{{newNote}}&quot; placeholder=&quot;Add new note...&quot; /&gt;\n\t\t&lt;span class=&quot;input-group-btn&quot;&gt;\n\t\t\t&lt;button class=&quot;btn btn-default&quot; type=&quot;submit&quot;&gt; Add &lt;/button&gt;\n\t\t&lt;/span&gt;\n\t&lt;/div&gt;\n&lt;/form&gt;\n</code></pre>\n<p><strong><em>root-folder</em>/app/js/components/user/notes/add-note.js</strong></p>\n<pre><code class=\"language-javascript\">import Ractive from 'ractive';\nimport User from '../../../models/user';\nimport Template from '../../../../views/user/notes/add-note.html';\n\nvar AddNote = Ractive.extend({\n\tisolated: true,\n\ttemplate: Template,\n\toninit: function() {\n\t\tthis.on('createNote', (rEvent) =&gt; {\n\t\t\trEvent.original.preventDefault();\n\t\t\tthis.fire('AddUserNote', rEvent.context.newNote);\n\t\t\tthis.set('newNote', '');\n\t\t});\n\t},\n\tdata: {\n\t\tnewNote: ''\n\t}\n});\n\nexport default AddNote;\n</code></pre>\n<p>This component just shows an input with a button so we can type our note and proceed saving it.\nThe <strong>createNote</strong> proxy event just fires a custom event with the introduced note message.\nThis event will bubble up through all parent components so any of them (the right one) can handle it.</p>\n<p>Now, the <em>notes-list</em> component.\n<strong><em>root-folder</em>/app/views/user/notes/notes-list.html</strong></p>\n<pre><code class=\"language-html\">&lt;ul class=&quot;list-group&quot;&gt;\n\t{{#each notes}}\n\t\t&lt;li class=&quot;list-group-item&quot;&gt;\n\t\t\t&lt;span&gt;{{.}}&lt;/span&gt;\n\t\t\t&lt;span class=&quot;pull-right&quot;&gt;\n\t\t\t\t&lt;span class=&quot;glyphicon glyphicon-remove&quot; on-click=&quot;deleteNote&quot; style=&quot;cursor: pointer;&quot;&gt;&lt;/span&gt;\n\t\t\t&lt;/span&gt;\n\t\t&lt;/li&gt;\n\t{{/each}}\n&lt;/ul&gt;\n</code></pre>\n<p><strong><em>root-folder</em>/app/js/components/user/notes/notes-list.js</strong></p>\n<pre><code class=\"language-javascript\">import Ractive from 'ractive';\nimport Template from '../../../views/user/notes/notes-list.html';\n\nvar NotesList = Ractive.extend({\n\tisolated: true,\n\ttemplate: Template,\n\toninit() {\n\t\tthis.on('deleteNote', (rEvent) =&gt; {\n\t\t\t\tthis.fire('RemoveUserNote', rEvent.context);\n\t\t});\n\t}\n});\n\nexport default NotesList;\n</code></pre>\n<p>In the <strong>deleteNote</strong> proxy event, we just fire a custom event with the message we want to delete.</p>\n<p>Now we need to update our <em>notes-section</em> component so it uses those new sub-components:\n<strong><em>root-folder</em>/app/views/user/notes-section.html</strong></p>\n<pre><code class=\"language-html\">&lt;div&gt;\n\t&lt;h3&gt; Notes &lt;/h3&gt;\n\t&lt;AddNote /&gt;\n\t&lt;br/&gt;\n\t&lt;NotesList notes=&quot;{{notes}}&quot; /&gt;\n&lt;/div&gt;\n</code></pre>\n<p>Note that we pass the notes list from the parent component to the <em>notes-list</em> subcomponent.</p>\n<p><strong><em>root-folder</em>/app/js/components/user/notes-section.js</strong></p>\n<pre><code class=\"language-javascript\">'use strict';\n\nimport Ractive from 'ractive';\nimport AddNote from './notes/add-note';\nimport NotesList from './notes/notes-list';\nimport template from '../../views/user/notes-section.html';\n\nvar NotesSection = Ractive.extend({\n\tisolated: true,\n\ttemplate: template,\n\tcomponents: {\n\t\tAddNote: AddNote,\n\t\tNotesList: NotesList\n\t}\n});\n\nexport default NotesSection;\n</code></pre>\n<p>We just need to update our user page view to pass the notes collection to this section:\n<strong><em>root-folder</em>/app/views/user-page.html</strong></p>\n<pre><code class=\"language-html\">&lt;div class=&quot;row&quot;&gt;\n\t&lt;div class=&quot;col-md-4&quot;&gt;\n\t\t&lt;UserProfile profile=&quot;{{user.profile}}&quot; /&gt;\n\t&lt;/div&gt;\n\t&lt;div class=&quot;col-md-4&quot;&gt;\n\t\t&lt;Repos repos=&quot;{{user.repos}}&quot; /&gt;\n\t&lt;/div&gt;\n\t&lt;div class=&quot;col-md-4&quot;&gt;\n\t\t&lt;Notes notes=&quot;{{user.notes}}&quot; /&gt;\n\t&lt;/div&gt;\n&lt;/div&gt;\n</code></pre>\n<p>We have all the notes stuff set up, but it's not functional yet as no one is managing reading and saving data to <em>Firebase</em>.\nI think reading should be done in the <strong>findByUsername</strong> function from the user model object, so when the user page gets loaded, we have all its needed information.\nOn the other hand, creating and removing notes should be done from the user page component through the user model object. The user page component is the component who knows which user we're diplaying, so it will be the one listening to sub-component custom events.</p>\n<p>Let's begin by reading user's notes.\n<strong><em>root-folder</em>/app/js/models/user.js</strong></p>\n<pre><code class=\"language-javascript\">import * as ajax from '../plugins/ajax';\n\nconst GITHUB_BASE_URL = 'https://api.github.com';\nconst FIREBASE_BASE_URL = `https://ps-github-saver.firebaseio.com`;\n\nclass User {\n\t\n\tconstructor(profile, repos, notes) {\n\t\tthis.profile = profile;\n\t\tthis.repos = repos;\n\t\tthis.notes = notes || []; // Default parameters values are only valid for undefined ones\n\t}\n\n\tstatic findByName(username) {\n\t\tlet userProfileUrl = `${GITHUB_BASE_URL}/users/${username}`,\n\t\t\tuserReposUrl = `${GITHUB_BASE_URL}/users/${username}/repos`,\n\t\t\tuserNotesUrl = `${FIREBASE_BASE_URL}/${username.toLowerCase()}.json`;\n\n\t\tlet result = new Promise((resolve, reject) =&gt; {\n\t\t\tPromise.all([\n\t\t\t\tajax.getJson(userProfileUrl),\n\t\t\t\tajax.getJson(userReposUrl),\n\t\t\t\tajax.getJson(userNotesUrl)\n\t\t\t])\n\t\t\t.then(values =&gt; {\n\t\t\t\t\tresolve(new User(values[0], values[1], values[2]));\n\t\t\t})\n\t\t\t.catch(reject);\n\t\t});\n\n\t\treturn result;\n\t}\n}\n\nexport default User;\n</code></pre>\n<p>We just need to declare the URL for the user's notes in our Firebase project and add another <em>getJson</em> promise to our group.</p>\n<p>Now we handle notes creation (in our user page component) so we can see anything in the notes list.\n<strong><em>root-folder</em>/app/js/components/user-page.js</strong>:</p>\n<pre><code class=\"language-javascript\">import Ractive from 'ractive';\nimport Template from '../../views/user-page.html';\nimport UserProfile from './user/profile-section';\nimport Repos from './user/repos-section';\nimport Notes from './user/notes-section';\n\nvar UserPage = Ractive.components.UserPage = Ractive.extend({\n\ttemplate: Template,\n\tcomponents: {\n\t\tUserProfile: UserProfile,\n\t\tRepos: Repos,\n\t\tNotes: Notes\n\t},\n\toninit() {\n\t\tthis.observe('req', (request) =&gt; {\n\t\t\tthis.set('user', request.body.user);\n\t\t});\n\n\t\t// *.*, *.AddUserNote, AddNote.*, AddNote.AddUserNote\n\t\tthis.on('*.AddUserNote', (newNote) =&gt; {\n\t\t\tconsole.log('UserPage::createNote# Adding new note to user:', this.get('user').profile.login);\n\t\t\tthis.get('user').addNote(newNote);\n\t\t});\n\t}\n});\nUserPage._name = 'UserPage';\n\nexport default UserPage;\n</code></pre>\n<p>The custom events fired from components get their names namespaced. The final event name is built beginning with the name of the component where it was generated, followed by a dot and the name you used when firing the event.\nWhen you register to events, you have the chance to use a wildcard both for the name of the component as well as the name of the event (see the comment above the event handler).</p>\n<p>We now need to implement the <strong>addNote</strong> function in the user model.\n<strong><em>root-folder</em>/app/js/models/user.js</strong></p>\n<pre><code class=\"language-javascript\">import * as ajax from '../plugins/ajax';\n\nconst GITHUB_BASE_URL = 'https://api.github.com';\nconst FIREBASE_BASE_URL = `https://ps-github-saver.firebaseio.com`;\n\nclass User {\n\t\n\tconstructor(profile, repos, notes) {\n\t\tthis.profile = profile;\n\t\tthis.repos = repos;\n\t\tthis.notes = notes || []; // Default parameters values are only valid for undefined ones\n\t}\n\n\taddNote(newNote) {\n\t\tthis.notes.push(newNote);\n\t\treturn ajax.putJson(`${FIREBASE_BASE_URL}/${this.profile.login.toLowerCase()}.json`, this.notes);\n\t}\n\n\tstatic findByName(username) {\n\t\tlet userProfileUrl = `${GITHUB_BASE_URL}/users/${username}`,\n\t\t\tuserReposUrl = `${GITHUB_BASE_URL}/users/${username}/repos`,\n\t\t\tuserNotesUrl = `${FIREBASE_BASE_URL}/${username.toLowerCase()}.json`;\n\n\t\tlet result = new Promise((resolve, reject) =&gt; {\n\t\t\tPromise.all([\n\t\t\t\tajax.getJson(userProfileUrl),\n\t\t\t\tajax.getJson(userReposUrl),\n\t\t\t\tajax.getJson(userNotesUrl)\n\t\t\t])\n\t\t\t.then(values =&gt; {\n\t\t\t\tresolve(new User(values[0], values[1], values[2]));\n\t\t\t})\n\t\t\t.catch(reject);\n\t\t});\n\n\t\treturn result;\n\t}\n}\n\nexport default User;\n</code></pre>\n<p>Here we're adding the new notes to the users note's list so it get updated inmediatly and Ractive will update the view to reflect this change before the note is actually persisted.\nThen, we call a new ajax pluging's function (<em>putJson</em>) to save the note in Firebase.</p>\n<p>Most of the time, save operation will work, so I prefer to not wait for the back-end response so the user feels our application is blazing fast.\nIn real world applications we would (for example) implement a mechanism so, if the operation fails, we warn the user and we undo the operation.</p>\n<p>Let's add the <strong>putJson</strong> function to our ajax component:\n<strong><em>root-folder</em>/app/js/plugins/ajax.js</strong></p>\n<pre><code class=\"language-javascript\">function checkResponseStatus(res) {\n\tif (res.status &lt; 400) {\n\t\treturn res;\n\t} else {\n\t\tlet error = new Error(res.statusText);\n\t\terror.statusCode = res.status;\n\t\terror.response = res;\n\t\tthrow error;\n\t}\n}\n\nfunction parseJson(res) {\n\treturn res.json();\n}\n\nexport function getJson(url, options = {cache: false}) {\n\treturn fetch(url)\n\t\t.then(checkResponseStatus)\n\t\t.then(parseJson);\n}\n\nexport function putJson(url, data) {\n\treturn fetch(url, {\n\t\tmethod: 'put',\n\t\theaders: {\n\t\t\t'Accept': 'application/json',\n\t\t\t'Content-Type': 'application/json'\n\t\t},\n\t\tbody: JSON.stringify(data)\n\t})\n\t.then(checkResponseStatus);\n}\n</code></pre>\n<p>If you reload the application in your browser right now, you should be able to save notes.</p>\n<p>The last step is to add notes removing functionality.\nWe will follow the same pattern: fire a custom event from the sub-component (<em>notes-list</em>) and handle it from the user page through user model.\nWhen we created the <em>notes-list</em> component, we already configured the view and the behavior to fire that event, so we just need to update the user page and the user model:\n<strong><em>root-folder</em>/app/js/components/user-page.js</strong> (<em>add 'RemoveUserNote' event handler</em>)</p>\n<pre><code class=\"language-javascript\">import Ractive from 'ractive';\nimport Template from '../../views/user-page.html';\nimport UserProfile from './user/profile-section';\nimport Repos from './user/repos-section';\nimport Notes from './user/notes-section';\n\nvar UserPage = Ractive.components.UserPage = Ractive.extend({\n\ttemplate: Template,\n\tcomponents: {\n\t\tUserProfile: UserProfile,\n\t\tRepos: Repos,\n\t\tNotes: Notes\n\t},\n\toninit() {\n\t\tthis.observe('req', (request) =&gt; {\n\t\t\tthis.set('user', request.body.user);\n\t\t});\n\n\t\t// *.*, *.AddUserNote, AddNote.*, AddNote.AddUserNote\n\t\tthis.on('*.AddUserNote', (newNote) =&gt; {\n\t\t\tconsole.log('UserPage::createNote# Adding new note to user:', this.get('user').profile.login);\n\t\t\tthis.get('user').addNote(newNote);\n\t\t});\n\n\t\tthis.on('*.RemoveUserNote', (note) =&gt; {\n\t\t\tthis.get('user').removeNote(note);\n\t\t});\n\t}\n});\nUserPage._name = 'UserPage';\n\nexport default UserPage;\n</code></pre>\n<p><strong><em>root-folder</em>/app/js/models/user.js</strong> (<em>add 'removeNote' function</em>)</p>\n<pre><code class=\"language-javascript\">import * as ajax from '../plugins/ajax';\n\nconst GITHUB_BASE_URL = 'https://api.github.com';\nconst FIREBASE_BASE_URL = `https://ps-github-saver.firebaseio.com`;\n\nclass User {\n\t\n\tconstructor(profile, repos, notes) {\n\t\tthis.profile = profile;\n\t\tthis.repos = repos;\n\t\tthis.notes = notes || []; // Default parameters values are only valid for undefined ones\n\t}\n\n\taddNote(newNote) {\n\t\tthis.notes.push(newNote);\n\t\treturn ajax.putJson(`${FIREBASE_BASE_URL}/${this.profile.login.toLowerCase()}.json`, this.notes);\n\t}\n\n\tremoveNote(note) {\n\t\tvar index = this.notes.indexOf(note);\n\t\tif (index &gt;= 0) {\n\t\t\tthis.notes.splice(index, 1);\n\t\t\treturn ajax.putJson(`${FIREBASE_BASE_URL}/${this.profile.login.toLowerCase()}.json`, this.notes);\n\t\t}\n\t}\n\n\tstatic findByName(username) {\n\t\tlet userProfileUrl = `${GITHUB_BASE_URL}/users/${username}`,\n\t\t\tuserReposUrl = `${GITHUB_BASE_URL}/users/${username}/repos`,\n\t\t\tuserNotesUrl = `${FIREBASE_BASE_URL}/${username.toLowerCase()}.json`;\n\n\t\tlet result = new Promise((resolve, reject) =&gt; {\n\t\t\tPromise.all([\n\t\t\t\tajax.getJson(userProfileUrl),\n\t\t\t\tajax.getJson(userReposUrl),\n\t\t\t\tajax.getJson(userNotesUrl)\n\t\t\t])\n\t\t\t.then(values =&gt; {\n\t\t\t\tresolve(new User(values[0], values[1], values[2]));\n\t\t\t})\n\t\t\t.catch(reject);\n\t\t});\n\n\t\treturn result;\n\t}\n}\n\nexport default User;\n</code></pre>\n<p>So, this is it.\nYou have used some of the main parts of Ractive along the way, but it has much more than this to offer.\nI strongly recommend to (first) follow the <a href=\"http://learn.ractivejs.org/hello-world/1/\">official tutorials</a> and (second) to read its <a href=\"http://docs.ractivejs.org/latest/get-started\">documentation</a>.</p>\n<p>We have some things we can improve with little effort in our application that we will accomplish in the last step of the tutorial.</p>\n<hr>\n<p>You can check the source code in <a href=\"https://github.com/PaquitoSoft/notetaker-ractive\">this GitHub repo</a>.</p>\n<hr>\n<p>Previous post: <a href=\"/post/ractive-js-tutorial-loading-user-info\">Loading user info</a>\nNext post: <a href=\"/post/ractive-js-tutorial-the-final-touch\">The final touch</a></p>\n<hr>\n"},"_superjson":{"values":{"post.creationDate":["Date"]}}},"__N_SSG":true}